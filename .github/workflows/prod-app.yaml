name: Deploy to AWS ECS
on:
  push:
    branches: ["main"]
env:
  AWS_REGION: ap-southeast-2
  ECR_REGISTRY: 968998815328.dkr.ecr.ap-southeast-2.amazonaws.com/huongbui/booking-movie
  ECS_CLUSTER: Movie-Booking-Harry
permissions:
  id-token: write
  contents: read
jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push API Gateway Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:api-gateway-task-${{ github.sha }} ./backend/api-gateway
          docker push ${{ env.ECR_REGISTRY }}:api-gateway-task-${{ github.sha }}
      - name: Build and push Movie Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:movie-task-${{ github.sha }} ./backend/movie-service
          docker push ${{ env.ECR_REGISTRY }}:movie-task-${{ github.sha }}
      - name: Build and push Booking Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:booking-task-${{ github.sha }} ./backend/booking-service
          docker push ${{ env.ECR_REGISTRY }}:booking-task-${{ github.sha }}
      - name: Build and push Customer Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:customer-task-${{ github.sha }} ./backend/customer-service
          docker push ${{ env.ECR_REGISTRY }}:customer-task-${{ github.sha }}
      - name: Build and push Payment Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:payment-task-${{ github.sha }} ./backend/payment-service
          docker push ${{ env.ECR_REGISTRY }}:payment-task-${{ github.sha }}
      - name: Build and push Seat Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:seat-task-${{ github.sha }} ./backend/seat-service
          docker push ${{ env.ECR_REGISTRY }}:seat-task-${{ github.sha }}
      - name: Build and push Notification Service Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:notification-task-${{ github.sha }} ./backend/notification-service
          docker push ${{ env.ECR_REGISTRY }}:notification-task-${{ github.sha }}
  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: api-gateway-service
            task-family: api-gateway-task
            task-definition: ecs/task-definitions/api-gateway-task.json
            container-name: api-gateway
          - name: movie-service
            task-family: movie-task
            task-definition: ecs/task-definitions/movie-task.json
            container-name: movie-service
          - name: booking-service
            task-family: booking-task
            task-definition: ecs/task-definitions/booking-task.json
            container-name: booking-service
          - name: customer-service
            task-family: customer-task
            task-definition: ecs/task-definitions/customer-task.json
            container-name: customer-service
          - name: payment-service
            task-family: payment-task12
            task-definition: ecs/task-definitions/payment-task.json
            container-name: payment-service
          - name: seat-service
            task-family: seat-task
            task-definition: ecs/task-definitions/seat-task.json
            container-name: seat-service
          - name: notification-service
            task-family: notification-task
            task-definition: ecs/task-definitions/notification-task.json
            container-name: notification-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ matrix.service.task-definition }}
          service: ${{ matrix.service.name }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

