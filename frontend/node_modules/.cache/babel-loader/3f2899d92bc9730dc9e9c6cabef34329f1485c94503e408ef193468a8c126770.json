{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { io } from 'socket.io-client';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối websocket để nhận thông báo realtime\n  useEffect(() => {\n    // Kết nối đến Socket.IO server với các tùy chọn cấu hình đúng\n    const socketInstance = io('http://localhost:8005', {\n      transports: ['websocket', 'polling'],\n      // Thử kết nối WebSocket trước, rồi quay lại polling nếu cần\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      forceNew: true\n    });\n    setSocket(socketInstance);\n\n    // Xử lý kết nối\n    socketInstance.on('connect', () => {\n      console.log('Kết nối đến notification service thành công!');\n\n      // Lấy customer_id từ localStorage nếu có\n      const customerId = localStorage.getItem('customer_id');\n      if (customerId) {\n        // Tham gia vào phòng của khách hàng\n        socketInstance.emit('join_room', {\n          customer_id: customerId\n        });\n      }\n    });\n\n    // Xử lý nhận thông báo\n    socketInstance.on('notification', data => {\n      console.log('Nhận thông báo mới:', data);\n      const customerId = localStorage.getItem('customer_id');\n\n      // Chỉ hiển thị thông báo cho đúng khách hàng\n      if (customerId && data.customer_id === customerId) {\n        // Hiển thị toast thông báo\n        toast.success(data.content, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n\n        // Cập nhật danh sách thông báo\n        setNotifications(prev => [data, ...prev]);\n      }\n    });\n\n    // Xử lý lỗi\n    socketInstance.on('connect_error', err => {\n      console.error('Lỗi kết nối đến notification service:', err);\n    });\n    socketInstance.on('error', err => {\n      console.error('Lỗi Socket.IO:', err);\n    });\n    socketInstance.on('reconnect_attempt', attempt => {\n      console.log(`Đang thử kết nối lại lần ${attempt}...`);\n    });\n    socketInstance.on('reconnect_failed', () => {\n      console.error('Không thể kết nối lại sau nhiều lần thử');\n    });\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, []);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    markAsRead: notificationId => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"M2deV8DnntVrUemW+kdl62yM5eA=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","io","ToastContainer","toast","getNotifications","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","socket","setSocket","notifications","setNotifications","loading","setLoading","customerId","localStorage","getItem","fetchNotifications","response","data","error","console","socketInstance","transports","reconnectionAttempts","reconnectionDelay","autoConnect","forceNew","on","log","emit","customer_id","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","prev","err","attempt","disconnect","contextValue","markAsRead","notificationId","map","n","_id","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getNotifications } from '../services/api';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Lấy thông báo ban đầu từ API\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (customerId) {\r\n      const fetchNotifications = async () => {\r\n        try {\r\n          const response = await getNotifications();\r\n          setNotifications(response.data || []);\r\n        } catch (error) {\r\n          console.error('Lỗi khi lấy thông báo:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchNotifications();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Kết nối websocket để nhận thông báo realtime\r\n  useEffect(() => {\r\n    // Kết nối đến Socket.IO server với các tùy chọn cấu hình đúng\r\n    const socketInstance = io('http://localhost:8005', {\r\n      transports: ['websocket', 'polling'], // Thử kết nối WebSocket trước, rồi quay lại polling nếu cần\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n      autoConnect: true,\r\n      forceNew: true\r\n    });\r\n    \r\n    setSocket(socketInstance);\r\n\r\n    // Xử lý kết nối\r\n    socketInstance.on('connect', () => {\r\n      console.log('Kết nối đến notification service thành công!');\r\n      \r\n      // Lấy customer_id từ localStorage nếu có\r\n      const customerId = localStorage.getItem('customer_id');\r\n      if (customerId) {\r\n        // Tham gia vào phòng của khách hàng\r\n        socketInstance.emit('join_room', { customer_id: customerId });\r\n      }\r\n    });\r\n\r\n    // Xử lý nhận thông báo\r\n    socketInstance.on('notification', (data) => {\r\n      console.log('Nhận thông báo mới:', data);\r\n      const customerId = localStorage.getItem('customer_id');\r\n      \r\n      // Chỉ hiển thị thông báo cho đúng khách hàng\r\n      if (customerId && data.customer_id === customerId) {\r\n        // Hiển thị toast thông báo\r\n        toast.success(data.content, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n        });\r\n        \r\n        // Cập nhật danh sách thông báo\r\n        setNotifications(prev => [data, ...prev]);\r\n      }\r\n    });\r\n\r\n    // Xử lý lỗi\r\n    socketInstance.on('connect_error', (err) => {\r\n      console.error('Lỗi kết nối đến notification service:', err);\r\n    });\r\n\r\n    socketInstance.on('error', (err) => {\r\n      console.error('Lỗi Socket.IO:', err);\r\n    });\r\n\r\n    socketInstance.on('reconnect_attempt', (attempt) => {\r\n      console.log(`Đang thử kết nối lại lần ${attempt}...`);\r\n    });\r\n\r\n    socketInstance.on('reconnect_failed', () => {\r\n      console.error('Không thể kết nối lại sau nhiều lần thử');\r\n    });\r\n\r\n    // Dọn dẹp khi component unmount\r\n    return () => {\r\n      socketInstance.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Đảm bảo context luôn có giá trị mới nhất\r\n  const contextValue = {\r\n    notifications,\r\n    loading,\r\n    markAsRead: (notificationId) => {\r\n      // Cập nhật trạng thái đã đọc cho thông báo\r\n      setNotifications(notifications.map(n => \r\n        n._id === notificationId ? { ...n, status: 'read' } : n\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={contextValue}>\r\n      {children}\r\n      <ToastContainer />\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}