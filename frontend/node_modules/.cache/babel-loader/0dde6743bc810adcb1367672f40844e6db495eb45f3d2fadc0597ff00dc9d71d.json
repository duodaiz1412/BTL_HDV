{"ast":null,"code":"import { io } from 'socket.io-client';\nconst SOCKET_URL = 'http://localhost:8000';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.customerId = null;\n  }\n  connect(customerId) {\n    if (this.socket && this.socket.connected) {\n      console.log('Socket already connected');\n      return;\n    }\n    this.customerId = customerId;\n\n    // Khởi tạo kết nối socket với query parameter customer_id\n    this.socket = io(SOCKET_URL, {\n      query: {\n        customer_id: customerId\n      },\n      transports: ['websocket'],\n      path: '/socket.io'\n    });\n\n    // Xử lý sự kiện kết nối\n    this.socket.on('connect', () => {\n      console.log('Socket connected');\n    });\n\n    // Xử lý sự kiện ngắt kết nối\n    this.socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n\n    // Xử lý sự kiện lỗi\n    this.socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n\n    // Xử lý sự kiện welcome\n    this.socket.on('welcome', data => {\n      console.log('Welcome message:', data);\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.customerId = null;\n    }\n  }\n\n  // Đăng ký callback cho sự kiện new_notification\n  onNewNotification(callback) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.on('new_notification', callback);\n  }\n\n  // Hủy đăng ký callback cho sự kiện new_notification\n  offNewNotification(callback) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.off('new_notification', callback);\n  }\n}\n\n// Export singleton instance\nexport default new SocketService();","map":{"version":3,"names":["io","SOCKET_URL","SocketService","constructor","socket","customerId","connect","connected","console","log","query","customer_id","transports","path","on","error","data","disconnect","onNewNotification","callback","offNewNotification","off"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nconst SOCKET_URL = 'http://localhost:8000';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.customerId = null;\r\n  }\r\n\r\n  connect(customerId) {\r\n    if (this.socket && this.socket.connected) {\r\n      console.log('Socket already connected');\r\n      return;\r\n    }\r\n\r\n    this.customerId = customerId;\r\n    \r\n    // Khởi tạo kết nối socket với query parameter customer_id\r\n    this.socket = io(SOCKET_URL, {\r\n      query: { customer_id: customerId },\r\n      transports: ['websocket'],\r\n      path: '/socket.io'\r\n    });\r\n\r\n    // Xử lý sự kiện kết nối\r\n    this.socket.on('connect', () => {\r\n      console.log('Socket connected');\r\n    });\r\n\r\n    // Xử lý sự kiện ngắt kết nối\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n    });\r\n\r\n    // Xử lý sự kiện lỗi\r\n    this.socket.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n    });\r\n\r\n    // Xử lý sự kiện welcome\r\n    this.socket.on('welcome', (data) => {\r\n      console.log('Welcome message:', data);\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.customerId = null;\r\n    }\r\n  }\r\n\r\n  // Đăng ký callback cho sự kiện new_notification\r\n  onNewNotification(callback) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.on('new_notification', callback);\r\n  }\r\n\r\n  // Hủy đăng ký callback cho sự kiện new_notification\r\n  offNewNotification(callback) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.off('new_notification', callback);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new SocketService(); "],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,UAAU,GAAG,uBAAuB;AAE1C,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,UAAU,GAAG,IAAI;EACxB;EAEAC,OAAOA,CAACD,UAAU,EAAE;IAClB,IAAI,IAAI,CAACD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACG,SAAS,EAAE;MACxCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC;IACF;IAEA,IAAI,CAACJ,UAAU,GAAGA,UAAU;;IAE5B;IACA,IAAI,CAACD,MAAM,GAAGJ,EAAE,CAACC,UAAU,EAAE;MAC3BS,KAAK,EAAE;QAAEC,WAAW,EAAEN;MAAW,CAAC;MAClCO,UAAU,EAAE,CAAC,WAAW,CAAC;MACzBC,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACA,IAAI,CAACT,MAAM,CAACU,EAAE,CAAC,SAAS,EAAE,MAAM;MAC9BN,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACL,MAAM,CAACU,EAAE,CAAC,YAAY,EAAE,MAAM;MACjCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACL,MAAM,CAACU,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MACjCP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACX,MAAM,CAACU,EAAE,CAAC,SAAS,EAAGE,IAAI,IAAK;MAClCR,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,IAAI,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO,IAAI,CAACZ,MAAM;EACpB;EAEAa,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACb,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACa,UAAU,CAAC,CAAC;MACxB,IAAI,CAACb,MAAM,GAAG,IAAI;MAClB,IAAI,CAACC,UAAU,GAAG,IAAI;IACxB;EACF;;EAEA;EACAa,iBAAiBA,CAACC,QAAQ,EAAE;IAC1B,IAAI,CAAC,IAAI,CAACf,MAAM,EAAE;MAChBI,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAC;MACrC;IACF;IACA,IAAI,CAACX,MAAM,CAACU,EAAE,CAAC,kBAAkB,EAAEK,QAAQ,CAAC;EAC9C;;EAEA;EACAC,kBAAkBA,CAACD,QAAQ,EAAE;IAC3B,IAAI,CAAC,IAAI,CAACf,MAAM,EAAE;MAChBI,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAC;MACrC;IACF;IACA,IAAI,CAACX,MAAM,CAACiB,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;EAC/C;AACF;;AAEA;AACA,eAAe,IAAIjB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}