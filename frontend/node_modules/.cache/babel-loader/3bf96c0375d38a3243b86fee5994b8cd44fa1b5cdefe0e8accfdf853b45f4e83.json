{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport socketService from '../services/socket';\nimport { getNotifications } from '../services/api';\n\n// Tạo context cho notifications\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationContext = /*#__PURE__*/createContext({\n  notifications: [],\n  unreadCount: 0,\n  markAsRead: () => {}\n});\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Cập nhật số lượng thông báo chưa đọc\n  const updateUnreadCount = useCallback(notifs => {\n    const count = notifs.filter(n => n.status === 'unread').length;\n    setUnreadCount(count);\n  }, []);\n\n  // Lấy danh sách thông báo\n  const fetchNotifications = useCallback(async () => {\n    try {\n      const response = await getNotifications();\n      const notifs = response.data;\n      setNotifications(notifs);\n      updateUnreadCount(notifs);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      toast.error('Không thể tải thông báo');\n    }\n  }, [updateUnreadCount]);\n\n  // Xử lý thông báo mới\n  const handleNewNotification = useCallback(notification => {\n    console.log('Received new notification:', notification);\n    setNotifications(prev => {\n      const newNotifications = [notification, ...prev];\n      updateUnreadCount(newNotifications);\n      return newNotifications;\n    });\n\n    // Hiển thị toast thông báo\n    toast.info(notification.content, {\n      onClick: () => {\n        // Có thể thêm xử lý khi click vào toast\n        window.location.href = '/notifications';\n      }\n    });\n  }, [updateUnreadCount]);\n\n  // Thiết lập kết nối socket\n  const setupSocket = useCallback(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) return;\n    try {\n      const socket = socketService.connect(customerId);\n\n      // Xử lý sự kiện kết nối thành công\n      socket.on('connect', () => {\n        console.log('Socket connected in NotificationProvider');\n        setIsConnected(true);\n        fetchNotifications(); // Lấy lại danh sách thông báo khi kết nối lại\n      });\n\n      // Xử lý sự kiện mất kết nối\n      socket.on('disconnect', () => {\n        console.log('Socket disconnected in NotificationProvider');\n        setIsConnected(false);\n      });\n\n      // Đăng ký lắng nghe sự kiện thông báo mới\n      socketService.onNewNotification(handleNewNotification);\n\n      // Lấy danh sách thông báo ban đầu\n      fetchNotifications();\n\n      // Cleanup khi component unmount\n      return () => {\n        socket.off('connect');\n        socket.off('disconnect');\n        socketService.offNewNotification(handleNewNotification);\n        socketService.disconnect();\n      };\n    } catch (error) {\n      console.error('Socket setup error:', error);\n      toast.error('Không thể kết nối đến server thông báo');\n    }\n  }, [fetchNotifications, handleNewNotification]);\n\n  // Theo dõi thay đổi của customer_id\n  // Cung cấp context cho toàn bộ ứng dụng\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      setNotifications,\n      updateUnreadCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"9fpl5TgFFApXqToHrH7cDDeg//k=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","toast","socketService","getNotifications","jsxDEV","_jsxDEV","NotificationContext","notifications","unreadCount","markAsRead","useNotifications","_s","NotificationProvider","children","_s2","setNotifications","setUnreadCount","isConnected","setIsConnected","updateUnreadCount","notifs","count","filter","n","status","length","fetchNotifications","response","data","error","console","handleNewNotification","notification","log","prev","newNotifications","info","content","onClick","window","location","href","setupSocket","customerId","localStorage","getItem","socket","connect","on","onNewNotification","off","offNewNotification","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport socketService from '../services/socket';\r\nimport { getNotifications } from '../services/api';\r\n\r\n// Tạo context cho notifications\r\nexport const NotificationContext = createContext({\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  markAsRead: () => {},\r\n});\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  // Cập nhật số lượng thông báo chưa đọc\r\n  const updateUnreadCount = useCallback((notifs) => {\r\n    const count = notifs.filter(n => n.status === 'unread').length;\r\n    setUnreadCount(count);\r\n  }, []);\r\n\r\n  // Lấy danh sách thông báo\r\n  const fetchNotifications = useCallback(async () => {\r\n    try {\r\n      const response = await getNotifications();\r\n      const notifs = response.data;\r\n      setNotifications(notifs);\r\n      updateUnreadCount(notifs);\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n      toast.error('Không thể tải thông báo');\r\n    }\r\n  }, [updateUnreadCount]);\r\n\r\n  // Xử lý thông báo mới\r\n  const handleNewNotification = useCallback((notification) => {\r\n    console.log('Received new notification:', notification);\r\n    setNotifications(prev => {\r\n      const newNotifications = [notification, ...prev];\r\n      updateUnreadCount(newNotifications);\r\n      return newNotifications;\r\n    });\r\n    \r\n    // Hiển thị toast thông báo\r\n    toast.info(notification.content, {\r\n      onClick: () => {\r\n        // Có thể thêm xử lý khi click vào toast\r\n        window.location.href = '/notifications';\r\n      }\r\n    });\r\n  }, [updateUnreadCount]);\r\n\r\n  // Thiết lập kết nối socket\r\n  const setupSocket = useCallback(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId) return;\r\n\r\n    try {\r\n      const socket = socketService.connect(customerId);\r\n\r\n      // Xử lý sự kiện kết nối thành công\r\n      socket.on('connect', () => {\r\n        console.log('Socket connected in NotificationProvider');\r\n        setIsConnected(true);\r\n        fetchNotifications(); // Lấy lại danh sách thông báo khi kết nối lại\r\n      });\r\n\r\n      // Xử lý sự kiện mất kết nối\r\n      socket.on('disconnect', () => {\r\n        console.log('Socket disconnected in NotificationProvider');\r\n        setIsConnected(false);\r\n      });\r\n\r\n      // Đăng ký lắng nghe sự kiện thông báo mới\r\n      socketService.onNewNotification(handleNewNotification);\r\n\r\n      // Lấy danh sách thông báo ban đầu\r\n      fetchNotifications();\r\n\r\n      // Cleanup khi component unmount\r\n      return () => {\r\n        socket.off('connect');\r\n        socket.off('disconnect');\r\n        socketService.offNewNotification(handleNewNotification);\r\n        socketService.disconnect();\r\n      };\r\n    } catch (error) {\r\n      console.error('Socket setup error:', error);\r\n      toast.error('Không thể kết nối đến server thông báo');\r\n    }\r\n  }, [fetchNotifications, handleNewNotification]);\r\n\r\n  // Theo dõi thay đổi của customer_id\r\n  // Cung cấp context cho toàn bộ ứng dụng\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        setNotifications,\r\n        updateUnreadCount\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}