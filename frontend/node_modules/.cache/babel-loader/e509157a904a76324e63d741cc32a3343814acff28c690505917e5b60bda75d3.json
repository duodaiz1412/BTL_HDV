{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\n\n// Cấu hình API endpoint\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const eventSourceRef = useRef(null);\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối SSE để nhận thông báo realtime - chỉ kết nối một lần\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối SSE');\n      return;\n    }\n\n    // Nếu đã có kết nối, không tạo kết nối mới\n    if (eventSourceRef.current) {\n      console.log('Đã có kết nối SSE, không kết nối lại');\n      return;\n    }\n    console.log('Bắt đầu kết nối SSE...');\n    const url = `${API_BASE_URL}/notifications/subscribe/${customerId}`;\n    const sse = new EventSource(url);\n    eventSourceRef.current = sse;\n\n    // Xử lý kết nối thành công\n    sse.addEventListener('connection_established', event => {\n      const data = JSON.parse(event.data);\n      console.log('Kết nối SSE thành công:', data);\n      setConnectionStatus('connected');\n    });\n\n    // Xử lý thông báo chưa đọc ban đầu\n    sse.addEventListener('unread_notifications', event => {\n      const unreadNotifications = JSON.parse(event.data);\n      console.log('Nhận thông báo chưa đọc:', unreadNotifications);\n      if (unreadNotifications && unreadNotifications.length > 0) {\n        setNotifications(prev => {\n          // Kết hợp thông báo mới với danh sách hiện tại, tránh trùng lặp\n          const existingIds = new Set(prev.map(n => n._id));\n          const filteredNew = unreadNotifications.filter(n => !existingIds.has(n._id));\n          return [...filteredNew, ...prev];\n        });\n      }\n    });\n\n    // Xử lý thông báo mới\n    sse.addEventListener('new_notification', event => {\n      const notification = JSON.parse(event.data);\n      console.log('Nhận thông báo mới:', notification);\n\n      // Hiển thị toast thông báo\n      toast.success(notification.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n\n      // Cập nhật danh sách thông báo\n      setNotifications(prev => {\n        // Kiểm tra nếu thông báo đã tồn tại\n        const exists = prev.some(n => n._id === notification._id);\n        if (exists) return prev;\n        return [notification, ...prev];\n      });\n    });\n\n    // Xử lý ping để giữ kết nối\n    sse.addEventListener('ping', event => {\n      console.log('Received ping from server');\n    });\n\n    // Xử lý sự kiện mặc định (nếu có)\n    sse.onmessage = event => {\n      console.log('Nhận sự kiện mặc định:', event.data);\n    };\n\n    // Xử lý lỗi\n    sse.onerror = error => {\n      console.error('Lỗi SSE:', error);\n      setConnectionStatus('error');\n\n      // Cố gắng kết nối lại sau 5 giây nếu mất kết nối\n      if (sse.readyState === EventSource.CLOSED) {\n        setConnectionStatus('reconnecting');\n        setTimeout(() => {\n          console.log('Đang cố gắng kết nối lại...');\n          // Đóng kết nối cũ\n          if (eventSourceRef.current) {\n            eventSourceRef.current.close();\n            eventSourceRef.current = null;\n          }\n          // Hàm useEffect sẽ chạy lại vì eventSourceRef.current đã thay đổi thành null\n          setConnectionStatus('disconnected');\n        }, 5000);\n      }\n    };\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      console.log('Đóng kết nối SSE...');\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n        setConnectionStatus('disconnected');\n      }\n    };\n  }, [eventSourceRef.current]); // Chỉ chạy khi eventSourceRef.current thay đổi\n\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái kết nối:', connectionStatus);\n  }, [connectionStatus]);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    connectionStatus,\n    reconnect: () => {\n      // Hàm để kết nối lại thủ công nếu cần\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n        setConnectionStatus('disconnected');\n      }\n    },\n    markAsRead: notificationId => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"poL/BIDsObrMhKdjYr2YHuZsZkE=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","ToastContainer","toast","getNotifications","jsxDEV","_jsxDEV","NotificationContext","API_BASE_URL","process","env","REACT_APP_API_URL","useNotifications","_s","NotificationProvider","children","_s2","notifications","setNotifications","loading","setLoading","connectionStatus","setConnectionStatus","eventSourceRef","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","error","current","url","sse","EventSource","addEventListener","event","JSON","parse","unreadNotifications","length","prev","existingIds","Set","map","n","_id","filteredNew","filter","has","notification","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","exists","some","onmessage","onerror","readyState","CLOSED","setTimeout","close","contextValue","reconnect","markAsRead","notificationId","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getNotifications } from '../services/api';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n// Cấu hình API endpoint\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const eventSourceRef = useRef(null);\r\n\r\n  // Lấy thông báo ban đầu từ API\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (customerId) {\r\n      const fetchNotifications = async () => {\r\n        try {\r\n          const response = await getNotifications();\r\n          console.log('Dữ liệu thông báo đã tải:', response.data);\r\n          setNotifications(response.data || []);\r\n        } catch (error) {\r\n          console.error('Lỗi khi lấy thông báo:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchNotifications();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Kết nối SSE để nhận thông báo realtime - chỉ kết nối một lần\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId) {\r\n      console.log('Không tìm thấy customer_id, không thể kết nối SSE');\r\n      return;\r\n    }\r\n\r\n    // Nếu đã có kết nối, không tạo kết nối mới\r\n    if (eventSourceRef.current) {\r\n      console.log('Đã có kết nối SSE, không kết nối lại');\r\n      return;\r\n    }\r\n\r\n    console.log('Bắt đầu kết nối SSE...');\r\n    \r\n    const url = `${API_BASE_URL}/notifications/subscribe/${customerId}`;\r\n    const sse = new EventSource(url);\r\n    eventSourceRef.current = sse;\r\n    \r\n    // Xử lý kết nối thành công\r\n    sse.addEventListener('connection_established', (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log('Kết nối SSE thành công:', data);\r\n      setConnectionStatus('connected');\r\n    });\r\n    \r\n    // Xử lý thông báo chưa đọc ban đầu\r\n    sse.addEventListener('unread_notifications', (event) => {\r\n      const unreadNotifications = JSON.parse(event.data);\r\n      console.log('Nhận thông báo chưa đọc:', unreadNotifications);\r\n      \r\n      if (unreadNotifications && unreadNotifications.length > 0) {\r\n        setNotifications(prev => {\r\n          // Kết hợp thông báo mới với danh sách hiện tại, tránh trùng lặp\r\n          const existingIds = new Set(prev.map(n => n._id));\r\n          const filteredNew = unreadNotifications.filter(n => !existingIds.has(n._id));\r\n          return [...filteredNew, ...prev];\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Xử lý thông báo mới\r\n    sse.addEventListener('new_notification', (event) => {\r\n      const notification = JSON.parse(event.data);\r\n      console.log('Nhận thông báo mới:', notification);\r\n      \r\n      // Hiển thị toast thông báo\r\n      toast.success(notification.content, {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n      });\r\n      \r\n      // Cập nhật danh sách thông báo\r\n      setNotifications(prev => {\r\n        // Kiểm tra nếu thông báo đã tồn tại\r\n        const exists = prev.some(n => n._id === notification._id);\r\n        if (exists) return prev;\r\n        return [notification, ...prev];\r\n      });\r\n    });\r\n    \r\n    // Xử lý ping để giữ kết nối\r\n    sse.addEventListener('ping', (event) => {\r\n      console.log('Received ping from server');\r\n    });\r\n    \r\n    // Xử lý sự kiện mặc định (nếu có)\r\n    sse.onmessage = (event) => {\r\n      console.log('Nhận sự kiện mặc định:', event.data);\r\n    };\r\n    \r\n    // Xử lý lỗi\r\n    sse.onerror = (error) => {\r\n      console.error('Lỗi SSE:', error);\r\n      setConnectionStatus('error');\r\n\r\n      // Cố gắng kết nối lại sau 5 giây nếu mất kết nối\r\n      if (sse.readyState === EventSource.CLOSED) {\r\n        setConnectionStatus('reconnecting');\r\n        setTimeout(() => {\r\n          console.log('Đang cố gắng kết nối lại...');\r\n          // Đóng kết nối cũ\r\n          if (eventSourceRef.current) {\r\n            eventSourceRef.current.close();\r\n            eventSourceRef.current = null;\r\n          }\r\n          // Hàm useEffect sẽ chạy lại vì eventSourceRef.current đã thay đổi thành null\r\n          setConnectionStatus('disconnected');\r\n        }, 5000);\r\n      }\r\n    };\r\n    \r\n    // Dọn dẹp khi component unmount\r\n    return () => {\r\n      console.log('Đóng kết nối SSE...');\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n        eventSourceRef.current = null;\r\n        setConnectionStatus('disconnected');\r\n      }\r\n    };\r\n  }, [eventSourceRef.current]); // Chỉ chạy khi eventSourceRef.current thay đổi\r\n\r\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\r\n  useEffect(() => {\r\n    console.log('Trạng thái kết nối:', connectionStatus);\r\n  }, [connectionStatus]);\r\n\r\n  // Đảm bảo context luôn có giá trị mới nhất\r\n  const contextValue = {\r\n    notifications,\r\n    loading,\r\n    connectionStatus,\r\n    reconnect: () => {\r\n      // Hàm để kết nối lại thủ công nếu cần\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n        eventSourceRef.current = null;\r\n        setConnectionStatus('disconnected');\r\n      }\r\n    },\r\n    markAsRead: (notificationId) => {\r\n      // Cập nhật trạng thái đã đọc cho thông báo\r\n      setNotifications(notifications.map(n => \r\n        n._id === notificationId ? { ...n, status: 'read' } : n\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={contextValue}>\r\n      {children}\r\n      <ToastContainer />\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACrF,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,SAASC,gBAAgB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,mBAAmB,gBAAGV,aAAa,CAAC,CAAC;;AAE3C;AACA,MAAMW,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,gBAAgB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMb,UAAU,CAACO,mBAAmB,CAAC;AAAA;AAACM,EAAA,CAAzDD,gBAAgB;AAE7B,OAAO,MAAME,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxB,QAAQ,CAAC,cAAc,CAAC;EACxE,MAAMyB,cAAc,GAAGtB,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACAF,SAAS,CAAC,MAAM;IACd,MAAMyB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACd,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;QACrC,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMxB,gBAAgB,CAAC,CAAC;UACzCyB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAACG,IAAI,CAAC;UACvDb,gBAAgB,CAACU,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,SAAS;UACRZ,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC;MACDO,kBAAkB,CAAC,CAAC;IACtB,CAAC,MAAM;MACLP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArB,SAAS,CAAC,MAAM;IACd,MAAMyB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACF,UAAU,EAAE;MACfK,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChE;IACF;;IAEA;IACA,IAAIP,cAAc,CAACU,OAAO,EAAE;MAC1BJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD;IACF;IAEAD,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAErC,MAAMI,GAAG,GAAG,GAAG1B,YAAY,4BAA4BgB,UAAU,EAAE;IACnE,MAAMW,GAAG,GAAG,IAAIC,WAAW,CAACF,GAAG,CAAC;IAChCX,cAAc,CAACU,OAAO,GAAGE,GAAG;;IAE5B;IACAA,GAAG,CAACE,gBAAgB,CAAC,wBAAwB,EAAGC,KAAK,IAAK;MACxD,MAAMP,IAAI,GAAGQ,IAAI,CAACC,KAAK,CAACF,KAAK,CAACP,IAAI,CAAC;MACnCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAAC;MAC5CT,mBAAmB,CAAC,WAAW,CAAC;IAClC,CAAC,CAAC;;IAEF;IACAa,GAAG,CAACE,gBAAgB,CAAC,sBAAsB,EAAGC,KAAK,IAAK;MACtD,MAAMG,mBAAmB,GAAGF,IAAI,CAACC,KAAK,CAACF,KAAK,CAACP,IAAI,CAAC;MAClDF,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEW,mBAAmB,CAAC;MAE5D,IAAIA,mBAAmB,IAAIA,mBAAmB,CAACC,MAAM,GAAG,CAAC,EAAE;QACzDxB,gBAAgB,CAACyB,IAAI,IAAI;UACvB;UACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACF,IAAI,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;UACjD,MAAMC,WAAW,GAAGR,mBAAmB,CAACS,MAAM,CAACH,CAAC,IAAI,CAACH,WAAW,CAACO,GAAG,CAACJ,CAAC,CAACC,GAAG,CAAC,CAAC;UAC5E,OAAO,CAAC,GAAGC,WAAW,EAAE,GAAGN,IAAI,CAAC;QAClC,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACAR,GAAG,CAACE,gBAAgB,CAAC,kBAAkB,EAAGC,KAAK,IAAK;MAClD,MAAMc,YAAY,GAAGb,IAAI,CAACC,KAAK,CAACF,KAAK,CAACP,IAAI,CAAC;MAC3CF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEsB,YAAY,CAAC;;MAEhD;MACAjD,KAAK,CAACkD,OAAO,CAACD,YAAY,CAACE,OAAO,EAAE;QAClCC,QAAQ,EAAE,WAAW;QACrBC,SAAS,EAAE,IAAI;QACfC,eAAe,EAAE,KAAK;QACtBC,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,IAAI;QAClBC,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACA1C,gBAAgB,CAACyB,IAAI,IAAI;QACvB;QACA,MAAMkB,MAAM,GAAGlB,IAAI,CAACmB,IAAI,CAACf,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKI,YAAY,CAACJ,GAAG,CAAC;QACzD,IAAIa,MAAM,EAAE,OAAOlB,IAAI;QACvB,OAAO,CAACS,YAAY,EAAE,GAAGT,IAAI,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAR,GAAG,CAACE,gBAAgB,CAAC,MAAM,EAAGC,KAAK,IAAK;MACtCT,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACAK,GAAG,CAAC4B,SAAS,GAAIzB,KAAK,IAAK;MACzBT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEQ,KAAK,CAACP,IAAI,CAAC;IACnD,CAAC;;IAED;IACAI,GAAG,CAAC6B,OAAO,GAAIhC,KAAK,IAAK;MACvBH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChCV,mBAAmB,CAAC,OAAO,CAAC;;MAE5B;MACA,IAAIa,GAAG,CAAC8B,UAAU,KAAK7B,WAAW,CAAC8B,MAAM,EAAE;QACzC5C,mBAAmB,CAAC,cAAc,CAAC;QACnC6C,UAAU,CAAC,MAAM;UACftC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC1C;UACA,IAAIP,cAAc,CAACU,OAAO,EAAE;YAC1BV,cAAc,CAACU,OAAO,CAACmC,KAAK,CAAC,CAAC;YAC9B7C,cAAc,CAACU,OAAO,GAAG,IAAI;UAC/B;UACA;UACAX,mBAAmB,CAAC,cAAc,CAAC;QACrC,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;;IAED;IACA,OAAO,MAAM;MACXO,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC,IAAIP,cAAc,CAACU,OAAO,EAAE;QAC1BV,cAAc,CAACU,OAAO,CAACmC,KAAK,CAAC,CAAC;QAC9B7C,cAAc,CAACU,OAAO,GAAG,IAAI;QAC7BX,mBAAmB,CAAC,cAAc,CAAC;MACrC;IACF,CAAC;EACH,CAAC,EAAE,CAACC,cAAc,CAACU,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE9B;EACAlC,SAAS,CAAC,MAAM;IACd8B,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAET,gBAAgB,CAAC;EACtD,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAMgD,YAAY,GAAG;IACnBpD,aAAa;IACbE,OAAO;IACPE,gBAAgB;IAChBiD,SAAS,EAAEA,CAAA,KAAM;MACf;MACA,IAAI/C,cAAc,CAACU,OAAO,EAAE;QAC1BV,cAAc,CAACU,OAAO,CAACmC,KAAK,CAAC,CAAC;QAC9B7C,cAAc,CAACU,OAAO,GAAG,IAAI;QAC7BX,mBAAmB,CAAC,cAAc,CAAC;MACrC;IACF,CAAC;IACDiD,UAAU,EAAGC,cAAc,IAAK;MAC9B;MACAtD,gBAAgB,CAACD,aAAa,CAAC6B,GAAG,CAACC,CAAC,IAClCA,CAAC,CAACC,GAAG,KAAKwB,cAAc,GAAG;QAAE,GAAGzB,CAAC;QAAE0B,MAAM,EAAE;MAAO,CAAC,GAAG1B,CACxD,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACEzC,OAAA,CAACC,mBAAmB,CAACmE,QAAQ;IAACC,KAAK,EAAEN,YAAa;IAAAtD,QAAA,GAC/CA,QAAQ,eACTT,OAAA,CAACJ,cAAc;MAAA0E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnC,CAAC;AAAC/D,GAAA,CAvKWF,oBAAoB;AAAAkE,EAAA,GAApBlE,oBAAoB;AAyKjC,eAAeA,oBAAoB;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}