{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef, useCallback } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\n\n// Cấu hình API endpoint\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\n\n// Cấu hình polling\nconst POLLING_INTERVAL = 5000; // 5 giây\nconst MAX_RETRY_COUNT = 5;\nconst RETRY_DELAY_MS = 3000;\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const pollingIntervalRef = useRef(null);\n  const retryCountRef = useRef(0);\n  const retryTimeoutRef = useRef(null);\n  const lastNotificationIdRef = useRef(null);\n  const isActiveRef = useRef(true); // Để theo dõi liệu component có còn mount không\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n\n          // Lưu lại ID của thông báo mới nhất\n          if (response.data && response.data.length > 0) {\n            const sortedNotifications = [...response.data].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n            lastNotificationIdRef.current = sortedNotifications[0]._id;\n          }\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Hàm dọn dẹp polling\n  const cleanupPolling = useCallback(() => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n    if (retryTimeoutRef.current) {\n      clearTimeout(retryTimeoutRef.current);\n      retryTimeoutRef.current = null;\n    }\n  }, []);\n\n  // Hàm để lấy thông báo mới sử dụng polling\n  const fetchNewNotifications = useCallback(async () => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId || !isActiveRef.current) return;\n    try {\n      // Tạo query params với last_notification_id nếu có\n      let url = `${API_BASE_URL}/notifications/customer/${customerId}`;\n      if (lastNotificationIdRef.current) {\n        url = `${url}?after_id=${lastNotificationIdRef.current}`;\n      }\n      setConnectionStatus('connected');\n      const response = await axios.get(url, {\n        timeout: 10000 // 10 giây timeout\n      });\n\n      // Reset retry counter sau khi gọi API thành công\n      retryCountRef.current = 0;\n\n      // Xử lý thông báo mới nếu có\n      if (response.data && response.data.length > 0) {\n        console.log('Nhận thông báo mới qua polling:', response.data);\n\n        // Cập nhật ID thông báo mới nhất\n        const sortedNewNotifications = [...response.data].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        lastNotificationIdRef.current = sortedNewNotifications[0]._id;\n\n        // Hiển thị toast cho mỗi thông báo mới\n        sortedNewNotifications.forEach(notification => {\n          toast.success(notification.content, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true\n          });\n        });\n\n        // Cập nhật danh sách thông báo\n        setNotifications(prev => {\n          // Kết hợp và loại bỏ trùng lặp\n          const existingIds = new Set(prev.map(n => n._id));\n          const newNotifications = response.data.filter(n => !existingIds.has(n._id));\n          return [...newNotifications, ...prev];\n        });\n      }\n    } catch (error) {\n      console.error('Lỗi khi polling thông báo:', error);\n\n      // Nếu mất kết nối, cố gắng kết nối lại\n      if (error.code === 'ECONNABORTED' || error.code === 'ERR_NETWORK') {\n        setConnectionStatus('error');\n\n        // Thử kết nối lại nếu chưa vượt quá số lần thử\n        if (retryCountRef.current < MAX_RETRY_COUNT) {\n          retryCountRef.current += 1;\n          const delay = RETRY_DELAY_MS * Math.pow(1.5, retryCountRef.current - 1); // Backoff strategy\n\n          console.log(`Sẽ thử kết nối lại sau ${delay}ms (lần thử ${retryCountRef.current}/${MAX_RETRY_COUNT})`);\n          setConnectionStatus('reconnecting');\n\n          // Dọn dẹp interval hiện tại\n          if (pollingIntervalRef.current) {\n            clearInterval(pollingIntervalRef.current);\n            pollingIntervalRef.current = null;\n          }\n\n          // Thiết lập lại polling sau khoảng thời gian chờ\n          retryTimeoutRef.current = setTimeout(() => {\n            if (!isActiveRef.current) return;\n            setupPolling();\n          }, delay);\n        } else {\n          console.error(`Đã thử kết nối lại ${MAX_RETRY_COUNT} lần không thành công. Dừng polling.`);\n          setConnectionStatus('failed');\n          cleanupPolling();\n        }\n      }\n    }\n  }, [cleanupPolling]);\n\n  // Hàm thiết lập polling\n  const setupPolling = useCallback(() => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n\n    // Thực hiện polling ngay lập tức một lần\n    fetchNewNotifications();\n\n    // Thiết lập interval để polling định kỳ\n    pollingIntervalRef.current = setInterval(() => {\n      fetchNewNotifications();\n    }, POLLING_INTERVAL);\n    setConnectionStatus('connected');\n    console.log(`Đã thiết lập polling mỗi ${POLLING_INTERVAL}ms`);\n  }, [fetchNewNotifications]);\n\n  // Thiết lập polling khi component mount\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể thiết lập polling');\n      return;\n    }\n    console.log('Bắt đầu thiết lập polling...');\n    isActiveRef.current = true;\n    setupPolling();\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      console.log('Dọn dẹp polling...');\n      isActiveRef.current = false;\n      cleanupPolling();\n      setConnectionStatus('disconnected');\n    };\n  }, [setupPolling, cleanupPolling]);\n\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái kết nối:', connectionStatus);\n  }, [connectionStatus]);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    connectionStatus,\n    reconnect: () => {\n      // Hàm để kết nối lại thủ công\n      cleanupPolling();\n      retryCountRef.current = 0; // Reset counter khi kết nối lại thủ công\n      setConnectionStatus('connecting');\n      setupPolling();\n    },\n    markAsRead: notificationId => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"9AFdiUgY6j8CbP3r04E88b/Zg/g=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","useCallback","ToastContainer","toast","getNotifications","axios","jsxDEV","_jsxDEV","NotificationContext","API_BASE_URL","process","env","REACT_APP_API_URL","POLLING_INTERVAL","MAX_RETRY_COUNT","RETRY_DELAY_MS","useNotifications","_s","NotificationProvider","children","_s2","notifications","setNotifications","loading","setLoading","connectionStatus","setConnectionStatus","pollingIntervalRef","retryCountRef","retryTimeoutRef","lastNotificationIdRef","isActiveRef","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","length","sortedNotifications","sort","a","b","Date","created_at","current","_id","error","cleanupPolling","clearInterval","clearTimeout","fetchNewNotifications","url","get","timeout","sortedNewNotifications","forEach","notification","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","prev","existingIds","Set","map","n","newNotifications","filter","has","code","delay","Math","pow","setTimeout","setupPolling","setInterval","contextValue","reconnect","markAsRead","notificationId","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef, useCallback } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getNotifications } from '../services/api';\r\nimport axios from 'axios';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n// Cấu hình API endpoint\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\r\n\r\n// Cấu hình polling\r\nconst POLLING_INTERVAL = 5000; // 5 giây\r\nconst MAX_RETRY_COUNT = 5;\r\nconst RETRY_DELAY_MS = 3000;\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const pollingIntervalRef = useRef(null);\r\n  const retryCountRef = useRef(0);\r\n  const retryTimeoutRef = useRef(null);\r\n  const lastNotificationIdRef = useRef(null);\r\n  const isActiveRef = useRef(true); // Để theo dõi liệu component có còn mount không\r\n\r\n  // Lấy thông báo ban đầu từ API\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (customerId) {\r\n      const fetchNotifications = async () => {\r\n        try {\r\n          const response = await getNotifications();\r\n          console.log('Dữ liệu thông báo đã tải:', response.data);\r\n          \r\n          // Lưu lại ID của thông báo mới nhất\r\n          if (response.data && response.data.length > 0) {\r\n            const sortedNotifications = [...response.data].sort((a, b) => \r\n              new Date(b.created_at) - new Date(a.created_at)\r\n            );\r\n            lastNotificationIdRef.current = sortedNotifications[0]._id;\r\n          }\r\n          \r\n          setNotifications(response.data || []);\r\n        } catch (error) {\r\n          console.error('Lỗi khi lấy thông báo:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchNotifications();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Hàm dọn dẹp polling\r\n  const cleanupPolling = useCallback(() => {\r\n    if (pollingIntervalRef.current) {\r\n      clearInterval(pollingIntervalRef.current);\r\n      pollingIntervalRef.current = null;\r\n    }\r\n    \r\n    if (retryTimeoutRef.current) {\r\n      clearTimeout(retryTimeoutRef.current);\r\n      retryTimeoutRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Hàm để lấy thông báo mới sử dụng polling\r\n  const fetchNewNotifications = useCallback(async () => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId || !isActiveRef.current) return;\r\n\r\n    try {\r\n      // Tạo query params với last_notification_id nếu có\r\n      let url = `${API_BASE_URL}/notifications/customer/${customerId}`;\r\n      if (lastNotificationIdRef.current) {\r\n        url = `${url}?after_id=${lastNotificationIdRef.current}`;\r\n      }\r\n      \r\n      setConnectionStatus('connected');\r\n      const response = await axios.get(url, {\r\n        timeout: 10000 // 10 giây timeout\r\n      });\r\n      \r\n      // Reset retry counter sau khi gọi API thành công\r\n      retryCountRef.current = 0;\r\n      \r\n      // Xử lý thông báo mới nếu có\r\n      if (response.data && response.data.length > 0) {\r\n        console.log('Nhận thông báo mới qua polling:', response.data);\r\n        \r\n        // Cập nhật ID thông báo mới nhất\r\n        const sortedNewNotifications = [...response.data].sort((a, b) => \r\n          new Date(b.created_at) - new Date(a.created_at)\r\n        );\r\n        lastNotificationIdRef.current = sortedNewNotifications[0]._id;\r\n        \r\n        // Hiển thị toast cho mỗi thông báo mới\r\n        sortedNewNotifications.forEach(notification => {\r\n          toast.success(notification.content, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          });\r\n        });\r\n        \r\n        // Cập nhật danh sách thông báo\r\n        setNotifications(prev => {\r\n          // Kết hợp và loại bỏ trùng lặp\r\n          const existingIds = new Set(prev.map(n => n._id));\r\n          const newNotifications = response.data.filter(n => !existingIds.has(n._id));\r\n          return [...newNotifications, ...prev];\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi polling thông báo:', error);\r\n      \r\n      // Nếu mất kết nối, cố gắng kết nối lại\r\n      if (error.code === 'ECONNABORTED' || error.code === 'ERR_NETWORK') {\r\n        setConnectionStatus('error');\r\n        \r\n        // Thử kết nối lại nếu chưa vượt quá số lần thử\r\n        if (retryCountRef.current < MAX_RETRY_COUNT) {\r\n          retryCountRef.current += 1;\r\n          const delay = RETRY_DELAY_MS * Math.pow(1.5, retryCountRef.current - 1); // Backoff strategy\r\n          \r\n          console.log(`Sẽ thử kết nối lại sau ${delay}ms (lần thử ${retryCountRef.current}/${MAX_RETRY_COUNT})`);\r\n          setConnectionStatus('reconnecting');\r\n          \r\n          // Dọn dẹp interval hiện tại\r\n          if (pollingIntervalRef.current) {\r\n            clearInterval(pollingIntervalRef.current);\r\n            pollingIntervalRef.current = null;\r\n          }\r\n          \r\n          // Thiết lập lại polling sau khoảng thời gian chờ\r\n          retryTimeoutRef.current = setTimeout(() => {\r\n            if (!isActiveRef.current) return;\r\n            \r\n            setupPolling();\r\n          }, delay);\r\n        } else {\r\n          console.error(`Đã thử kết nối lại ${MAX_RETRY_COUNT} lần không thành công. Dừng polling.`);\r\n          setConnectionStatus('failed');\r\n          cleanupPolling();\r\n        }\r\n      }\r\n    }\r\n  }, [cleanupPolling]);\r\n\r\n  // Hàm thiết lập polling\r\n  const setupPolling = useCallback(() => {\r\n    if (pollingIntervalRef.current) {\r\n      clearInterval(pollingIntervalRef.current);\r\n    }\r\n    \r\n    // Thực hiện polling ngay lập tức một lần\r\n    fetchNewNotifications();\r\n    \r\n    // Thiết lập interval để polling định kỳ\r\n    pollingIntervalRef.current = setInterval(() => {\r\n      fetchNewNotifications();\r\n    }, POLLING_INTERVAL);\r\n    \r\n    setConnectionStatus('connected');\r\n    console.log(`Đã thiết lập polling mỗi ${POLLING_INTERVAL}ms`);\r\n  }, [fetchNewNotifications]);\r\n\r\n  // Thiết lập polling khi component mount\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId) {\r\n      console.log('Không tìm thấy customer_id, không thể thiết lập polling');\r\n      return;\r\n    }\r\n\r\n    console.log('Bắt đầu thiết lập polling...');\r\n    isActiveRef.current = true;\r\n    setupPolling();\r\n\r\n    // Dọn dẹp khi component unmount\r\n    return () => {\r\n      console.log('Dọn dẹp polling...');\r\n      isActiveRef.current = false;\r\n      cleanupPolling();\r\n      setConnectionStatus('disconnected');\r\n    };\r\n  }, [setupPolling, cleanupPolling]);\r\n\r\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\r\n  useEffect(() => {\r\n    console.log('Trạng thái kết nối:', connectionStatus);\r\n  }, [connectionStatus]);\r\n\r\n  // Đảm bảo context luôn có giá trị mới nhất\r\n  const contextValue = {\r\n    notifications,\r\n    loading,\r\n    connectionStatus,\r\n    reconnect: () => {\r\n      // Hàm để kết nối lại thủ công\r\n      cleanupPolling();\r\n      retryCountRef.current = 0; // Reset counter khi kết nối lại thủ công\r\n      setConnectionStatus('connecting');\r\n      setupPolling();\r\n    },\r\n    markAsRead: (notificationId) => {\r\n      // Cập nhật trạng thái đã đọc cho thông báo\r\n      setNotifications(notifications.map(n => \r\n        n._id === notificationId ? { ...n, status: 'read' } : n\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={contextValue}>\r\n      {children}\r\n      <ToastContainer />\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}