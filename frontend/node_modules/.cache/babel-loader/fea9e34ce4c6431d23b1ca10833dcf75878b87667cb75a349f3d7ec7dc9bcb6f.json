{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\n\n// Cấu hình API endpoint\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\n\n// Cấu hình retry\nconst MAX_RETRY_COUNT = 5;\nconst RETRY_DELAY_MS = 3000;\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const eventSourceRef = useRef(null);\n  const retryCountRef = useRef(0);\n  const retryTimeoutRef = useRef(null);\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Hàm dọn dẹp kết nối SSE\n  const cleanupSSE = () => {\n    if (eventSourceRef.current) {\n      console.log('Đóng kết nối SSE hiện tại...');\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    if (retryTimeoutRef.current) {\n      clearTimeout(retryTimeoutRef.current);\n      retryTimeoutRef.current = null;\n    }\n  };\n\n  // Hàm thiết lập kết nối SSE mới\n  const setupSSEConnection = customerId => {\n    if (!customerId) return;\n\n    // Nếu đã có kết nối, không tạo kết nối mới\n    if (eventSourceRef.current) {\n      console.log('Đã có kết nối SSE, không kết nối lại');\n      return;\n    }\n    try {\n      console.log(`Bắt đầu kết nối SSE (lần thử ${retryCountRef.current + 1})...`);\n      setConnectionStatus('connecting');\n\n      // Sử dụng timestamp để tránh cache\n      const timestamp = new Date().getTime();\n      const url = `${API_BASE_URL}/notifications/subscribe/${customerId}?_=${timestamp}`;\n\n      // Tạo EventSource mới với withCredentials = true để gửi cookies (nếu cần)\n      const sse = new EventSource(url, {\n        withCredentials: false\n      });\n      eventSourceRef.current = sse;\n\n      // Xử lý kết nối thành công\n      sse.addEventListener('connection_established', event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('Kết nối SSE thành công:', data);\n          setConnectionStatus('connected');\n          // Reset retry counter sau khi kết nối thành công\n          retryCountRef.current = 0;\n        } catch (error) {\n          console.error('Lỗi khi xử lý sự kiện connection_established:', error);\n        }\n      });\n\n      // Xử lý thông báo chưa đọc ban đầu\n      sse.addEventListener('unread_notifications', event => {\n        try {\n          const unreadNotifications = JSON.parse(event.data);\n          console.log('Nhận thông báo chưa đọc:', unreadNotifications);\n          if (unreadNotifications && unreadNotifications.length > 0) {\n            setNotifications(prev => {\n              // Kết hợp thông báo mới với danh sách hiện tại, tránh trùng lặp\n              const existingIds = new Set(prev.map(n => n._id));\n              const filteredNew = unreadNotifications.filter(n => !existingIds.has(n._id));\n              return [...filteredNew, ...prev];\n            });\n          }\n        } catch (error) {\n          console.error('Lỗi khi xử lý thông báo chưa đọc:', error);\n        }\n      });\n\n      // Xử lý thông báo mới\n      sse.addEventListener('new_notification', event => {\n        try {\n          const notification = JSON.parse(event.data);\n          console.log('Nhận thông báo mới:', notification);\n\n          // Hiển thị toast thông báo\n          toast.success(notification.content, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true\n          });\n\n          // Cập nhật danh sách thông báo\n          setNotifications(prev => {\n            // Kiểm tra nếu thông báo đã tồn tại\n            const exists = prev.some(n => n._id === notification._id);\n            if (exists) return prev;\n            return [notification, ...prev];\n          });\n        } catch (error) {\n          console.error('Lỗi khi xử lý thông báo mới:', error);\n        }\n      });\n\n      // Xử lý ping để giữ kết nối\n      sse.addEventListener('ping', event => {\n        console.log('Received ping from server');\n      });\n\n      // Xử lý sự kiện mặc định (nếu có)\n      sse.onmessage = event => {\n        console.log('Nhận sự kiện mặc định:', event.data);\n      };\n\n      // Xử lý lỗi và kết nối lại\n      sse.onerror = error => {\n        console.error('Lỗi SSE:', error);\n\n        // Kiểm tra trạng thái kết nối\n        if (sse.readyState === EventSource.CLOSED || sse.readyState === EventSource.CONNECTING) {\n          setConnectionStatus('error');\n\n          // Đóng kết nối cũ\n          cleanupSSE();\n\n          // Thử kết nối lại nếu chưa vượt quá số lần thử\n          if (retryCountRef.current < MAX_RETRY_COUNT) {\n            retryCountRef.current += 1;\n            const delay = RETRY_DELAY_MS * Math.pow(1.5, retryCountRef.current - 1); // Backoff strategy\n\n            console.log(`Sẽ thử kết nối lại sau ${delay}ms (lần thử ${retryCountRef.current}/${MAX_RETRY_COUNT})`);\n            setConnectionStatus('reconnecting');\n            retryTimeoutRef.current = setTimeout(() => {\n              setupSSEConnection(customerId);\n            }, delay);\n          } else {\n            console.error(`Đã thử kết nối lại ${MAX_RETRY_COUNT} lần không thành công. Dừng kết nối.`);\n            setConnectionStatus('failed');\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Lỗi khi thiết lập kết nối SSE:', error);\n      setConnectionStatus('error');\n    }\n  };\n\n  // Kết nối SSE để nhận thông báo realtime - chỉ kết nối một lần\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối SSE');\n      return;\n    }\n\n    // Thiết lập kết nối ban đầu\n    setupSSEConnection(customerId);\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      cleanupSSE();\n      setConnectionStatus('disconnected');\n    };\n  }, []); // Chỉ chạy một lần khi component mount\n\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái kết nối:', connectionStatus);\n  }, [connectionStatus]);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    connectionStatus,\n    reconnect: () => {\n      // Hàm để kết nối lại thủ công\n      cleanupSSE();\n      retryCountRef.current = 0; // Reset counter khi kết nối lại thủ công\n      setConnectionStatus('disconnected');\n      const customerId = localStorage.getItem('customer_id');\n      if (customerId) {\n        setupSSEConnection(customerId);\n      }\n    },\n    markAsRead: notificationId => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"jrQnXwI/l9Ic5lRM6D8IA7Pd/oE=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","ToastContainer","toast","getNotifications","jsxDEV","_jsxDEV","NotificationContext","API_BASE_URL","process","env","REACT_APP_API_URL","MAX_RETRY_COUNT","RETRY_DELAY_MS","useNotifications","_s","NotificationProvider","children","_s2","notifications","setNotifications","loading","setLoading","connectionStatus","setConnectionStatus","eventSourceRef","retryCountRef","retryTimeoutRef","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","error","cleanupSSE","current","close","clearTimeout","setupSSEConnection","timestamp","Date","getTime","url","sse","EventSource","withCredentials","addEventListener","event","JSON","parse","unreadNotifications","length","prev","existingIds","Set","map","n","_id","filteredNew","filter","has","notification","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","exists","some","onmessage","onerror","readyState","CLOSED","CONNECTING","delay","Math","pow","setTimeout","contextValue","reconnect","markAsRead","notificationId","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getNotifications } from '../services/api';\r\n\r\nconst NotificationContext = createContext();\r\n\r\n// Cấu hình API endpoint\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8006';\r\n\r\n// Cấu hình retry\r\nconst MAX_RETRY_COUNT = 5;\r\nconst RETRY_DELAY_MS = 3000;\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const eventSourceRef = useRef(null);\r\n  const retryCountRef = useRef(0);\r\n  const retryTimeoutRef = useRef(null);\r\n\r\n  // Lấy thông báo ban đầu từ API\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (customerId) {\r\n      const fetchNotifications = async () => {\r\n        try {\r\n          const response = await getNotifications();\r\n          console.log('Dữ liệu thông báo đã tải:', response.data);\r\n          setNotifications(response.data || []);\r\n        } catch (error) {\r\n          console.error('Lỗi khi lấy thông báo:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchNotifications();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Hàm dọn dẹp kết nối SSE\r\n  const cleanupSSE = () => {\r\n    if (eventSourceRef.current) {\r\n      console.log('Đóng kết nối SSE hiện tại...');\r\n      eventSourceRef.current.close();\r\n      eventSourceRef.current = null;\r\n    }\r\n    \r\n    if (retryTimeoutRef.current) {\r\n      clearTimeout(retryTimeoutRef.current);\r\n      retryTimeoutRef.current = null;\r\n    }\r\n  };\r\n\r\n  // Hàm thiết lập kết nối SSE mới\r\n  const setupSSEConnection = (customerId) => {\r\n    if (!customerId) return;\r\n    \r\n    // Nếu đã có kết nối, không tạo kết nối mới\r\n    if (eventSourceRef.current) {\r\n      console.log('Đã có kết nối SSE, không kết nối lại');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`Bắt đầu kết nối SSE (lần thử ${retryCountRef.current + 1})...`);\r\n      setConnectionStatus('connecting');\r\n      \r\n      // Sử dụng timestamp để tránh cache\r\n      const timestamp = new Date().getTime();\r\n      const url = `${API_BASE_URL}/notifications/subscribe/${customerId}?_=${timestamp}`;\r\n      \r\n      // Tạo EventSource mới với withCredentials = true để gửi cookies (nếu cần)\r\n      const sse = new EventSource(url, { withCredentials: false });\r\n      eventSourceRef.current = sse;\r\n      \r\n      // Xử lý kết nối thành công\r\n      sse.addEventListener('connection_established', (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('Kết nối SSE thành công:', data);\r\n          setConnectionStatus('connected');\r\n          // Reset retry counter sau khi kết nối thành công\r\n          retryCountRef.current = 0;\r\n        } catch (error) {\r\n          console.error('Lỗi khi xử lý sự kiện connection_established:', error);\r\n        }\r\n      });\r\n      \r\n      // Xử lý thông báo chưa đọc ban đầu\r\n      sse.addEventListener('unread_notifications', (event) => {\r\n        try {\r\n          const unreadNotifications = JSON.parse(event.data);\r\n          console.log('Nhận thông báo chưa đọc:', unreadNotifications);\r\n          \r\n          if (unreadNotifications && unreadNotifications.length > 0) {\r\n            setNotifications(prev => {\r\n              // Kết hợp thông báo mới với danh sách hiện tại, tránh trùng lặp\r\n              const existingIds = new Set(prev.map(n => n._id));\r\n              const filteredNew = unreadNotifications.filter(n => !existingIds.has(n._id));\r\n              return [...filteredNew, ...prev];\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Lỗi khi xử lý thông báo chưa đọc:', error);\r\n        }\r\n      });\r\n      \r\n      // Xử lý thông báo mới\r\n      sse.addEventListener('new_notification', (event) => {\r\n        try {\r\n          const notification = JSON.parse(event.data);\r\n          console.log('Nhận thông báo mới:', notification);\r\n          \r\n          // Hiển thị toast thông báo\r\n          toast.success(notification.content, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n          });\r\n          \r\n          // Cập nhật danh sách thông báo\r\n          setNotifications(prev => {\r\n            // Kiểm tra nếu thông báo đã tồn tại\r\n            const exists = prev.some(n => n._id === notification._id);\r\n            if (exists) return prev;\r\n            return [notification, ...prev];\r\n          });\r\n        } catch (error) {\r\n          console.error('Lỗi khi xử lý thông báo mới:', error);\r\n        }\r\n      });\r\n      \r\n      // Xử lý ping để giữ kết nối\r\n      sse.addEventListener('ping', (event) => {\r\n        console.log('Received ping from server');\r\n      });\r\n      \r\n      // Xử lý sự kiện mặc định (nếu có)\r\n      sse.onmessage = (event) => {\r\n        console.log('Nhận sự kiện mặc định:', event.data);\r\n      };\r\n      \r\n      // Xử lý lỗi và kết nối lại\r\n      sse.onerror = (error) => {\r\n        console.error('Lỗi SSE:', error);\r\n        \r\n        // Kiểm tra trạng thái kết nối\r\n        if (sse.readyState === EventSource.CLOSED || sse.readyState === EventSource.CONNECTING) {\r\n          setConnectionStatus('error');\r\n          \r\n          // Đóng kết nối cũ\r\n          cleanupSSE();\r\n          \r\n          // Thử kết nối lại nếu chưa vượt quá số lần thử\r\n          if (retryCountRef.current < MAX_RETRY_COUNT) {\r\n            retryCountRef.current += 1;\r\n            const delay = RETRY_DELAY_MS * Math.pow(1.5, retryCountRef.current - 1); // Backoff strategy\r\n            \r\n            console.log(`Sẽ thử kết nối lại sau ${delay}ms (lần thử ${retryCountRef.current}/${MAX_RETRY_COUNT})`);\r\n            setConnectionStatus('reconnecting');\r\n            \r\n            retryTimeoutRef.current = setTimeout(() => {\r\n              setupSSEConnection(customerId);\r\n            }, delay);\r\n          } else {\r\n            console.error(`Đã thử kết nối lại ${MAX_RETRY_COUNT} lần không thành công. Dừng kết nối.`);\r\n            setConnectionStatus('failed');\r\n          }\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Lỗi khi thiết lập kết nối SSE:', error);\r\n      setConnectionStatus('error');\r\n    }\r\n  };\r\n\r\n  // Kết nối SSE để nhận thông báo realtime - chỉ kết nối một lần\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId) {\r\n      console.log('Không tìm thấy customer_id, không thể kết nối SSE');\r\n      return;\r\n    }\r\n\r\n    // Thiết lập kết nối ban đầu\r\n    setupSSEConnection(customerId);\r\n\r\n    // Dọn dẹp khi component unmount\r\n    return () => {\r\n      cleanupSSE();\r\n      setConnectionStatus('disconnected');\r\n    };\r\n  }, []); // Chỉ chạy một lần khi component mount\r\n\r\n  // Debug: Hiển thị thông báo trong console mỗi khi connectionStatus thay đổi\r\n  useEffect(() => {\r\n    console.log('Trạng thái kết nối:', connectionStatus);\r\n  }, [connectionStatus]);\r\n\r\n  // Đảm bảo context luôn có giá trị mới nhất\r\n  const contextValue = {\r\n    notifications,\r\n    loading,\r\n    connectionStatus,\r\n    reconnect: () => {\r\n      // Hàm để kết nối lại thủ công\r\n      cleanupSSE();\r\n      retryCountRef.current = 0; // Reset counter khi kết nối lại thủ công\r\n      setConnectionStatus('disconnected');\r\n      const customerId = localStorage.getItem('customer_id');\r\n      if (customerId) {\r\n        setupSSEConnection(customerId);\r\n      }\r\n    },\r\n    markAsRead: (notificationId) => {\r\n      // Cập nhật trạng thái đã đọc cho thông báo\r\n      setNotifications(notifications.map(n => \r\n        n._id === notificationId ? { ...n, status: 'read' } : n\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={contextValue}>\r\n      {children}\r\n      <ToastContainer />\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACrF,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,SAASC,gBAAgB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,mBAAmB,gBAAGV,aAAa,CAAC,CAAC;;AAE3C;AACA,MAAMW,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,eAAe,GAAG,CAAC;AACzB,MAAMC,cAAc,GAAG,IAAI;AAE3B,OAAO,MAAMC,gBAAgB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMf,UAAU,CAACO,mBAAmB,CAAC;AAAA;AAACQ,EAAA,CAAzDD,gBAAgB;AAE7B,OAAO,MAAME,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,cAAc,CAAC;EACxE,MAAM2B,cAAc,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMyB,aAAa,GAAGzB,MAAM,CAAC,CAAC,CAAC;EAC/B,MAAM0B,eAAe,GAAG1B,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACAF,SAAS,CAAC,MAAM;IACd,MAAM6B,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACd,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;QACrC,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAM5B,gBAAgB,CAAC,CAAC;UACzC6B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAACG,IAAI,CAAC;UACvDf,gBAAgB,CAACY,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAChD,CAAC,SAAS;UACRd,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC;MACDS,kBAAkB,CAAC,CAAC;IACtB,CAAC,MAAM;MACLT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIZ,cAAc,CAACa,OAAO,EAAE;MAC1BL,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CT,cAAc,CAACa,OAAO,CAACC,KAAK,CAAC,CAAC;MAC9Bd,cAAc,CAACa,OAAO,GAAG,IAAI;IAC/B;IAEA,IAAIX,eAAe,CAACW,OAAO,EAAE;MAC3BE,YAAY,CAACb,eAAe,CAACW,OAAO,CAAC;MACrCX,eAAe,CAACW,OAAO,GAAG,IAAI;IAChC;EACF,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAIb,UAAU,IAAK;IACzC,IAAI,CAACA,UAAU,EAAE;;IAEjB;IACA,IAAIH,cAAc,CAACa,OAAO,EAAE;MAC1BL,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD;IACF;IAEA,IAAI;MACFD,OAAO,CAACC,GAAG,CAAC,gCAAgCR,aAAa,CAACY,OAAO,GAAG,CAAC,MAAM,CAAC;MAC5Ed,mBAAmB,CAAC,YAAY,CAAC;;MAEjC;MACA,MAAMkB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACtC,MAAMC,GAAG,GAAG,GAAGrC,YAAY,4BAA4BoB,UAAU,MAAMc,SAAS,EAAE;;MAElF;MACA,MAAMI,GAAG,GAAG,IAAIC,WAAW,CAACF,GAAG,EAAE;QAAEG,eAAe,EAAE;MAAM,CAAC,CAAC;MAC5DvB,cAAc,CAACa,OAAO,GAAGQ,GAAG;;MAE5B;MACAA,GAAG,CAACG,gBAAgB,CAAC,wBAAwB,EAAGC,KAAK,IAAK;QACxD,IAAI;UACF,MAAMf,IAAI,GAAGgB,IAAI,CAACC,KAAK,CAACF,KAAK,CAACf,IAAI,CAAC;UACnCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAAC;UAC5CX,mBAAmB,CAAC,WAAW,CAAC;UAChC;UACAE,aAAa,CAACY,OAAO,GAAG,CAAC;QAC3B,CAAC,CAAC,OAAOF,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;QACvE;MACF,CAAC,CAAC;;MAEF;MACAU,GAAG,CAACG,gBAAgB,CAAC,sBAAsB,EAAGC,KAAK,IAAK;QACtD,IAAI;UACF,MAAMG,mBAAmB,GAAGF,IAAI,CAACC,KAAK,CAACF,KAAK,CAACf,IAAI,CAAC;UAClDF,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEmB,mBAAmB,CAAC;UAE5D,IAAIA,mBAAmB,IAAIA,mBAAmB,CAACC,MAAM,GAAG,CAAC,EAAE;YACzDlC,gBAAgB,CAACmC,IAAI,IAAI;cACvB;cACA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACF,IAAI,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;cACjD,MAAMC,WAAW,GAAGR,mBAAmB,CAACS,MAAM,CAACH,CAAC,IAAI,CAACH,WAAW,CAACO,GAAG,CAACJ,CAAC,CAACC,GAAG,CAAC,CAAC;cAC5E,OAAO,CAAC,GAAGC,WAAW,EAAE,GAAGN,IAAI,CAAC;YAClC,CAAC,CAAC;UACJ;QACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QAC3D;MACF,CAAC,CAAC;;MAEF;MACAU,GAAG,CAACG,gBAAgB,CAAC,kBAAkB,EAAGC,KAAK,IAAK;QAClD,IAAI;UACF,MAAMc,YAAY,GAAGb,IAAI,CAACC,KAAK,CAACF,KAAK,CAACf,IAAI,CAAC;UAC3CF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE8B,YAAY,CAAC;;UAEhD;UACA7D,KAAK,CAAC8D,OAAO,CAACD,YAAY,CAACE,OAAO,EAAE;YAClCC,QAAQ,EAAE,WAAW;YACrBC,SAAS,EAAE,IAAI;YACfC,eAAe,EAAE,KAAK;YACtBC,YAAY,EAAE,IAAI;YAClBC,YAAY,EAAE,IAAI;YAClBC,SAAS,EAAE;UACb,CAAC,CAAC;;UAEF;UACApD,gBAAgB,CAACmC,IAAI,IAAI;YACvB;YACA,MAAMkB,MAAM,GAAGlB,IAAI,CAACmB,IAAI,CAACf,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKI,YAAY,CAACJ,GAAG,CAAC;YACzD,IAAIa,MAAM,EAAE,OAAOlB,IAAI;YACvB,OAAO,CAACS,YAAY,EAAE,GAAGT,IAAI,CAAC;UAChC,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOnB,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF,CAAC,CAAC;;MAEF;MACAU,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAGC,KAAK,IAAK;QACtCjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C,CAAC,CAAC;;MAEF;MACAY,GAAG,CAAC6B,SAAS,GAAIzB,KAAK,IAAK;QACzBjB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEgB,KAAK,CAACf,IAAI,CAAC;MACnD,CAAC;;MAED;MACAW,GAAG,CAAC8B,OAAO,GAAIxC,KAAK,IAAK;QACvBH,OAAO,CAACG,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;;QAEhC;QACA,IAAIU,GAAG,CAAC+B,UAAU,KAAK9B,WAAW,CAAC+B,MAAM,IAAIhC,GAAG,CAAC+B,UAAU,KAAK9B,WAAW,CAACgC,UAAU,EAAE;UACtFvD,mBAAmB,CAAC,OAAO,CAAC;;UAE5B;UACAa,UAAU,CAAC,CAAC;;UAEZ;UACA,IAAIX,aAAa,CAACY,OAAO,GAAG1B,eAAe,EAAE;YAC3Cc,aAAa,CAACY,OAAO,IAAI,CAAC;YAC1B,MAAM0C,KAAK,GAAGnE,cAAc,GAAGoE,IAAI,CAACC,GAAG,CAAC,GAAG,EAAExD,aAAa,CAACY,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;;YAEzEL,OAAO,CAACC,GAAG,CAAC,0BAA0B8C,KAAK,eAAetD,aAAa,CAACY,OAAO,IAAI1B,eAAe,GAAG,CAAC;YACtGY,mBAAmB,CAAC,cAAc,CAAC;YAEnCG,eAAe,CAACW,OAAO,GAAG6C,UAAU,CAAC,MAAM;cACzC1C,kBAAkB,CAACb,UAAU,CAAC;YAChC,CAAC,EAAEoD,KAAK,CAAC;UACX,CAAC,MAAM;YACL/C,OAAO,CAACG,KAAK,CAAC,sBAAsBxB,eAAe,sCAAsC,CAAC;YAC1FY,mBAAmB,CAAC,QAAQ,CAAC;UAC/B;QACF;MACF,CAAC;IACH,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDZ,mBAAmB,CAAC,OAAO,CAAC;IAC9B;EACF,CAAC;;EAED;EACAzB,SAAS,CAAC,MAAM;IACd,MAAM6B,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACF,UAAU,EAAE;MACfK,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChE;IACF;;IAEA;IACAO,kBAAkB,CAACb,UAAU,CAAC;;IAE9B;IACA,OAAO,MAAM;MACXS,UAAU,CAAC,CAAC;MACZb,mBAAmB,CAAC,cAAc,CAAC;IACrC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAzB,SAAS,CAAC,MAAM;IACdkC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEX,gBAAgB,CAAC;EACtD,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAM6D,YAAY,GAAG;IACnBjE,aAAa;IACbE,OAAO;IACPE,gBAAgB;IAChB8D,SAAS,EAAEA,CAAA,KAAM;MACf;MACAhD,UAAU,CAAC,CAAC;MACZX,aAAa,CAACY,OAAO,GAAG,CAAC,CAAC,CAAC;MAC3Bd,mBAAmB,CAAC,cAAc,CAAC;MACnC,MAAMI,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACtD,IAAIF,UAAU,EAAE;QACda,kBAAkB,CAACb,UAAU,CAAC;MAChC;IACF,CAAC;IACD0D,UAAU,EAAGC,cAAc,IAAK;MAC9B;MACAnE,gBAAgB,CAACD,aAAa,CAACuC,GAAG,CAACC,CAAC,IAClCA,CAAC,CAACC,GAAG,KAAK2B,cAAc,GAAG;QAAE,GAAG5B,CAAC;QAAE6B,MAAM,EAAE;MAAO,CAAC,GAAG7B,CACxD,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACErD,OAAA,CAACC,mBAAmB,CAACkF,QAAQ;IAACC,KAAK,EAAEN,YAAa;IAAAnE,QAAA,GAC/CA,QAAQ,eACTX,OAAA,CAACJ,cAAc;MAAAyF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnC,CAAC;AAAC5E,GAAA,CA7NWF,oBAAoB;AAAA+E,EAAA,GAApB/E,oBAAoB;AA+NjC,eAAeA,oBAAoB;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}