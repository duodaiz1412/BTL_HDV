{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications, markNotificationAsRead } from '../services/api';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối Socket.IO để nhận thông báo realtime\n  useEffect(() => {\n    console.log('=== Bắt đầu kết nối Socket.IO... ===');\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối Socket.IO');\n      setSocketStatus('no customer_id');\n      return;\n    }\n\n    // Kết nối đến Socket.IO server qua API Gateway\n    const socketUrl = 'http://localhost:8000';\n    console.log('Kết nối Socket.IO đến API Gateway:', socketUrl);\n\n    // Cập nhật cấu hình Socket.IO để phù hợp với API Gateway mới\n    const newSocket = io(socketUrl, {\n      path: '/socket.io',\n      transports: ['websocket', 'polling'],\n      // Ưu tiên websocket trước\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      timeout: 20000,\n      query: {\n        customer_id: customerId\n      } // Truyền customer_id qua query params\n    });\n    setSocket(newSocket);\n\n    // Xử lý các sự kiện Socket.IO\n    newSocket.on('connect', () => {\n      console.log('=== Socket.IO: Kết nối đã mở ===');\n      console.log('Socket ID:', newSocket.id);\n      setSocketStatus('connected');\n\n      // Tham gia room của khách hàng sau khi kết nối thành công\n      newSocket.emit('join_room', {\n        room: `customer_${customerId}`\n      });\n      console.log('Đã gửi yêu cầu tham gia room:', `customer_${customerId}`);\n    });\n\n    // Xử lý sự kiện chào mừng (đã thêm trong API Gateway)\n    newSocket.on('welcome', data => {\n      console.log('=== Socket.IO: Thông điệp chào mừng ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n      setSocketStatus('connected');\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('=== Socket.IO: Đã ngắt kết nối ===');\n      console.log('Lý do:', reason);\n      setSocketStatus('disconnected');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('=== Socket.IO: Lỗi kết nối ===');\n      console.error('Chi tiết lỗi:', error);\n      setSocketStatus('error');\n    });\n    newSocket.on('room_joined', data => {\n      console.log('=== Socket.IO: Đã tham gia room ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n    });\n    newSocket.on('unread_notifications', data => {\n      console.log('=== Socket.IO: Nhận thông báo chưa đọc ===');\n      console.log('Số lượng:', data.length);\n      console.log('Dữ liệu:', JSON.stringify(data, null, 2));\n\n      // Cập nhật danh sách thông báo (nối thêm vào danh sách hiện tại)\n      setNotifications(prev => {\n        // Lọc ra các thông báo không trùng lặp\n        const existingIds = new Set(prev.map(n => n._id));\n        const newNotifications = data.filter(n => !existingIds.has(n._id));\n        return [...prev, ...newNotifications];\n      });\n    });\n    newSocket.on('new_notification', data => {\n      console.log('=== Socket.IO: Nhận thông báo mới từ API Gateway ===');\n      console.log('Loại thông báo:', data.type || 'không xác định');\n      console.log('Nội dung:', data.content);\n      console.log('Dữ liệu đầy đủ:', JSON.stringify(data, null, 2));\n\n      // Hiển thị toast thông báo\n      toast.success(data.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n\n      // Cập nhật danh sách thông báo\n      setNotifications(prev => [data, ...prev]);\n    });\n    newSocket.on('notification', data => {\n      console.log('=== Socket.IO: Nhận thông báo thông thường ===');\n      console.log('Nội dung:', data.content);\n      console.log('Dữ liệu đầy đủ:', JSON.stringify(data, null, 2));\n\n      // Hiển thị toast thông báo\n      toast.success(data.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n\n      // Cập nhật danh sách thông báo\n      setNotifications(prev => [data, ...prev]);\n    });\n    newSocket.on('notification_marked_read', data => {\n      console.log('=== Socket.IO: Thông báo đã được đánh dấu đã đọc ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n\n      // Cập nhật trạng thái thông báo trong danh sách\n      if (data.notification_id) {\n        setNotifications(prev => prev.map(n => n._id === data.notification_id ? {\n          ...n,\n          status: 'read'\n        } : n));\n      }\n    });\n    newSocket.on('error', error => {\n      console.error('=== Socket.IO: Lỗi từ server ===');\n      console.error('Chi tiết lỗi:', error);\n      toast.error(error.message || 'Lỗi không xác định từ server');\n    });\n\n    // Lắng nghe tất cả các sự kiện khác\n    newSocket.onAny((eventName, ...args) => {\n      console.log(`=== Socket.IO: Sự kiện không xử lý: ${eventName} ===`);\n      console.log('Dữ liệu nhận được:', JSON.stringify(args, null, 2));\n    });\n\n    // Đóng kết nối khi component unmount\n    return () => {\n      console.log('=== Socket.IO: Đóng kết nối ===');\n      if (newSocket) {\n        newSocket.off();\n        newSocket.disconnect();\n      }\n    };\n  }, [socketStatus === 'reconnecting']); // Thử kết nối lại khi trạng thái là reconnecting\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('=== Socket.IO: Trạng thái kết nối thay đổi ===');\n    console.log('Trạng thái hiện tại:', socketStatus);\n  }, [socketStatus]);\n\n  // Đánh dấu thông báo đã đọc\n  const handleMarkAsRead = async notificationId => {\n    try {\n      console.log('=== Đánh dấu thông báo đã đọc ===');\n      console.log('ID thông báo:', notificationId);\n\n      // Gọi API để đánh dấu đã đọc\n      await markNotificationAsRead(notificationId);\n\n      // Cập nhật trạng thái trong context\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n\n      // Gửi lệnh đánh dấu đã đọc qua Socket.IO nếu kết nối đang mở\n      if (socket && socket.connected) {\n        console.log('Gửi yêu cầu đánh dấu đã đọc qua Socket.IO');\n        socket.emit('mark_read', {\n          notification_id: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Lỗi khi đánh dấu thông báo đã đọc:', error);\n    }\n  };\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: handleMarkAsRead,\n    socket // Thêm socket vào context để các component khác có thể truy cập\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"4n/h08Rh30GQowf5KDzPaxyAk8g=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","ToastContainer","toast","getNotifications","markNotificationAsRead","io","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","socket","setSocket","notifications","setNotifications","loading","setLoading","socketStatus","setSocketStatus","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","error","socketUrl","newSocket","path","transports","reconnectionAttempts","reconnectionDelay","timeout","query","customer_id","on","id","emit","room","JSON","stringify","reason","length","prev","existingIds","Set","map","n","_id","newNotifications","filter","has","type","content","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","notification_id","status","message","onAny","eventName","args","off","disconnect","handleMarkAsRead","notificationId","connected","contextValue","markAsRead","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications, markNotificationAsRead } from '../services/api';\nimport { io } from 'socket.io-client';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối Socket.IO để nhận thông báo realtime\n  useEffect(() => {\n    console.log('=== Bắt đầu kết nối Socket.IO... ===');\n    \n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối Socket.IO');\n      setSocketStatus('no customer_id');\n      return;\n    }\n    \n    // Kết nối đến Socket.IO server qua API Gateway\n    const socketUrl = 'http://localhost:8000';\n    console.log('Kết nối Socket.IO đến API Gateway:', socketUrl);\n    \n    // Cập nhật cấu hình Socket.IO để phù hợp với API Gateway mới\n    const newSocket = io(socketUrl, {\n      path: '/socket.io',\n      transports: ['websocket', 'polling'],  // Ưu tiên websocket trước\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      timeout: 20000,\n      query: { customer_id: customerId }  // Truyền customer_id qua query params\n    });\n    \n    setSocket(newSocket);\n    \n    // Xử lý các sự kiện Socket.IO\n    newSocket.on('connect', () => {\n      console.log('=== Socket.IO: Kết nối đã mở ===');\n      console.log('Socket ID:', newSocket.id);\n      setSocketStatus('connected');\n      \n      // Tham gia room của khách hàng sau khi kết nối thành công\n      newSocket.emit('join_room', { room: `customer_${customerId}` });\n      console.log('Đã gửi yêu cầu tham gia room:', `customer_${customerId}`);\n    });\n\n    // Xử lý sự kiện chào mừng (đã thêm trong API Gateway)\n    newSocket.on('welcome', (data) => {\n      console.log('=== Socket.IO: Thông điệp chào mừng ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n      setSocketStatus('connected');\n    });\n    \n    newSocket.on('disconnect', (reason) => {\n      console.log('=== Socket.IO: Đã ngắt kết nối ===');\n      console.log('Lý do:', reason);\n      setSocketStatus('disconnected');\n    });\n    \n    newSocket.on('connect_error', (error) => {\n      console.error('=== Socket.IO: Lỗi kết nối ===');\n      console.error('Chi tiết lỗi:', error);\n      setSocketStatus('error');\n    });\n    \n    newSocket.on('room_joined', (data) => {\n      console.log('=== Socket.IO: Đã tham gia room ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n    });\n    \n    newSocket.on('unread_notifications', (data) => {\n      console.log('=== Socket.IO: Nhận thông báo chưa đọc ===');\n      console.log('Số lượng:', data.length);\n      console.log('Dữ liệu:', JSON.stringify(data, null, 2));\n      \n      // Cập nhật danh sách thông báo (nối thêm vào danh sách hiện tại)\n      setNotifications(prev => {\n        // Lọc ra các thông báo không trùng lặp\n        const existingIds = new Set(prev.map(n => n._id));\n        const newNotifications = data.filter(n => !existingIds.has(n._id));\n        return [...prev, ...newNotifications];\n      });\n    });\n    \n    newSocket.on('new_notification', (data) => {\n      console.log('=== Socket.IO: Nhận thông báo mới từ API Gateway ===');\n      console.log('Loại thông báo:', data.type || 'không xác định');\n      console.log('Nội dung:', data.content);\n      console.log('Dữ liệu đầy đủ:', JSON.stringify(data, null, 2));\n      \n      // Hiển thị toast thông báo\n      toast.success(data.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n      });\n      \n      // Cập nhật danh sách thông báo\n      setNotifications(prev => [data, ...prev]);\n    });\n    \n    newSocket.on('notification', (data) => {\n      console.log('=== Socket.IO: Nhận thông báo thông thường ===');\n      console.log('Nội dung:', data.content);\n      console.log('Dữ liệu đầy đủ:', JSON.stringify(data, null, 2));\n      \n      // Hiển thị toast thông báo\n      toast.success(data.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n      });\n      \n      // Cập nhật danh sách thông báo\n      setNotifications(prev => [data, ...prev]);\n    });\n\n    newSocket.on('notification_marked_read', (data) => {\n      console.log('=== Socket.IO: Thông báo đã được đánh dấu đã đọc ===');\n      console.log('Chi tiết:', JSON.stringify(data, null, 2));\n      \n      // Cập nhật trạng thái thông báo trong danh sách\n      if (data.notification_id) {\n        setNotifications(prev => prev.map(n => \n          n._id === data.notification_id ? { ...n, status: 'read' } : n\n        ));\n      }\n    });\n    \n    newSocket.on('error', (error) => {\n      console.error('=== Socket.IO: Lỗi từ server ===');\n      console.error('Chi tiết lỗi:', error);\n      toast.error(error.message || 'Lỗi không xác định từ server');\n    });\n    \n    // Lắng nghe tất cả các sự kiện khác\n    newSocket.onAny((eventName, ...args) => {\n      console.log(`=== Socket.IO: Sự kiện không xử lý: ${eventName} ===`);\n      console.log('Dữ liệu nhận được:', JSON.stringify(args, null, 2));\n    });\n\n    // Đóng kết nối khi component unmount\n    return () => {\n      console.log('=== Socket.IO: Đóng kết nối ===');\n      if (newSocket) {\n        newSocket.off();\n        newSocket.disconnect();\n      }\n    };\n  }, [socketStatus === 'reconnecting']); // Thử kết nối lại khi trạng thái là reconnecting\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('=== Socket.IO: Trạng thái kết nối thay đổi ===');\n    console.log('Trạng thái hiện tại:', socketStatus);\n  }, [socketStatus]);\n\n  // Đánh dấu thông báo đã đọc\n  const handleMarkAsRead = async (notificationId) => {\n    try {\n      console.log('=== Đánh dấu thông báo đã đọc ===');\n      console.log('ID thông báo:', notificationId);\n      \n      // Gọi API để đánh dấu đã đọc\n      await markNotificationAsRead(notificationId);\n      \n      // Cập nhật trạng thái trong context\n      setNotifications(notifications.map(n => \n        n._id === notificationId ? { ...n, status: 'read' } : n\n      ));\n      \n      // Gửi lệnh đánh dấu đã đọc qua Socket.IO nếu kết nối đang mở\n      if (socket && socket.connected) {\n        console.log('Gửi yêu cầu đánh dấu đã đọc qua Socket.IO');\n        socket.emit('mark_read', {\n          notification_id: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Lỗi khi đánh dấu thông báo đã đọc:', error);\n    }\n  };\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: handleMarkAsRead,\n    socket // Thêm socket vào context để các component khác có thể truy cập\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      <ToastContainer />\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}