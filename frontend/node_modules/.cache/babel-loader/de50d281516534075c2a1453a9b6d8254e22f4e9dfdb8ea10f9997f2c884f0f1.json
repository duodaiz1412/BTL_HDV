{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications, markNotificationAsRead } from '../services/api';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối Socket.IO để nhận thông báo realtime\n  useEffect(() => {\n    console.log('Bắt đầu kết nối Socket.IO...');\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối Socket.IO');\n      setSocketStatus('no customer_id');\n      return;\n    }\n\n    // Kết nối đến Socket.IO server qua API Gateway\n    const socketUrl = 'http://localhost:8000';\n    console.log('Kết nối Socket.IO đến API Gateway:', socketUrl);\n    const newSocket = io(socketUrl, {\n      path: '/socket.io',\n      transports: ['polling', 'websocket'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n    setSocket(newSocket);\n\n    // Xử lý các sự kiện Socket.IO\n    newSocket.on('connect', () => {\n      console.log('Kết nối Socket.IO đã mở, ID:', newSocket.id);\n      setSocketStatus('connected');\n\n      // Tham gia room của khách hàng sau khi kết nối thành công\n      newSocket.emit('join_room', {\n        customer_id: customerId\n      });\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('Socket.IO đã ngắt kết nối:', reason);\n      setSocketStatus('disconnected');\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Lỗi kết nối Socket.IO:', error);\n      setSocketStatus('error');\n    });\n    newSocket.on('joined', data => {\n      console.log('Đã tham gia room:', data);\n    });\n    newSocket.on('unread_notifications', data => {\n      console.log('Nhận thông báo chưa đọc:', data);\n      // Cập nhật danh sách thông báo (nối thêm vào danh sách hiện tại)\n      setNotifications(prev => {\n        // Lọc ra các thông báo không trùng lặp\n        const existingIds = new Set(prev.map(n => n._id));\n        const newNotifications = data.filter(n => !existingIds.has(n._id));\n        return [...prev, ...newNotifications];\n      });\n    });\n    newSocket.on('notification', data => {\n      console.log('Nhận thông báo mới:', data);\n\n      // Hiển thị toast thông báo\n      toast.success(data.content, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n\n      // Cập nhật danh sách thông báo\n      setNotifications(prev => [data, ...prev]);\n    });\n    newSocket.on('notification_marked_read', data => {\n      console.log('Thông báo đã được đánh dấu đã đọc:', data);\n      // Cập nhật trạng thái thông báo trong danh sách\n      if (data.notification_id) {\n        setNotifications(prev => prev.map(n => n._id === data.notification_id ? {\n          ...n,\n          status: 'read'\n        } : n));\n      }\n    });\n    newSocket.on('error', error => {\n      console.error('Lỗi từ server Socket.IO:', error);\n      toast.error(error.message || 'Lỗi không xác định từ server');\n    });\n\n    // Đóng kết nối khi component unmount\n    return () => {\n      console.log('Đóng kết nối Socket.IO');\n      if (newSocket) {\n        newSocket.off();\n        newSocket.disconnect();\n      }\n    };\n  }, [socketStatus === 'reconnecting']); // Thử kết nối lại khi trạng thái là reconnecting\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái Socket:', socketStatus);\n  }, [socketStatus]);\n\n  // Đánh dấu thông báo đã đọc\n  const handleMarkAsRead = async notificationId => {\n    try {\n      // Gọi API để đánh dấu đã đọc\n      await markNotificationAsRead(notificationId);\n\n      // Cập nhật trạng thái trong context\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n\n      // Gửi lệnh đánh dấu đã đọc qua Socket.IO nếu kết nối đang mở\n      if (socket && socket.connected) {\n        socket.emit('mark_read', {\n          notification_id: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Lỗi khi đánh dấu thông báo đã đọc:', error);\n    }\n  };\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: handleMarkAsRead\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"4n/h08Rh30GQowf5KDzPaxyAk8g=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","ToastContainer","toast","getNotifications","markNotificationAsRead","io","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","socket","setSocket","notifications","setNotifications","loading","setLoading","socketStatus","setSocketStatus","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","error","socketUrl","newSocket","path","transports","reconnectionAttempts","reconnectionDelay","timeout","on","id","emit","customer_id","reason","prev","existingIds","Set","map","n","_id","newNotifications","filter","has","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","notification_id","status","message","off","disconnect","handleMarkAsRead","notificationId","connected","contextValue","markAsRead","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications, markNotificationAsRead } from '../services/api';\nimport { io } from 'socket.io-client';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối Socket.IO để nhận thông báo realtime\n  useEffect(() => {\n    console.log('Bắt đầu kết nối Socket.IO...');\n    \n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) {\n      console.log('Không tìm thấy customer_id, không thể kết nối Socket.IO');\n      setSocketStatus('no customer_id');\n      return;\n    }\n    \n    // Kết nối đến Socket.IO server qua API Gateway\n    const socketUrl = 'http://localhost:8000';\n    console.log('Kết nối Socket.IO đến API Gateway:', socketUrl);\n    \n    const newSocket = io(socketUrl, {\n      path: '/socket.io',\n      transports: ['polling', 'websocket'],\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      timeout: 10000\n    });\n    \n    setSocket(newSocket);\n    \n    // Xử lý các sự kiện Socket.IO\n    newSocket.on('connect', () => {\n      console.log('Kết nối Socket.IO đã mở, ID:', newSocket.id);\n      setSocketStatus('connected');\n      \n      // Tham gia room của khách hàng sau khi kết nối thành công\n      newSocket.emit('join_room', { customer_id: customerId });\n    });\n    \n    newSocket.on('disconnect', (reason) => {\n      console.log('Socket.IO đã ngắt kết nối:', reason);\n      setSocketStatus('disconnected');\n    });\n    \n    newSocket.on('connect_error', (error) => {\n      console.error('Lỗi kết nối Socket.IO:', error);\n      setSocketStatus('error');\n    });\n    \n    newSocket.on('joined', (data) => {\n      console.log('Đã tham gia room:', data);\n    });\n    \n    newSocket.on('unread_notifications', (data) => {\n      console.log('Nhận thông báo chưa đọc:', data);\n      // Cập nhật danh sách thông báo (nối thêm vào danh sách hiện tại)\n      setNotifications(prev => {\n        // Lọc ra các thông báo không trùng lặp\n        const existingIds = new Set(prev.map(n => n._id));\n        const newNotifications = data.filter(n => !existingIds.has(n._id));\n        return [...prev, ...newNotifications];\n      });\n    });\n    \n    newSocket.on('notification', (data) => {\n      console.log('Nhận thông báo mới:', data);\n      \n        // Hiển thị toast thông báo\n        toast.success(data.content, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n        });\n        \n        // Cập nhật danh sách thông báo\n        setNotifications(prev => [data, ...prev]);\n    });\n\n    newSocket.on('notification_marked_read', (data) => {\n      console.log('Thông báo đã được đánh dấu đã đọc:', data);\n      // Cập nhật trạng thái thông báo trong danh sách\n      if (data.notification_id) {\n        setNotifications(prev => prev.map(n => \n          n._id === data.notification_id ? { ...n, status: 'read' } : n\n        ));\n      }\n    });\n    \n    newSocket.on('error', (error) => {\n      console.error('Lỗi từ server Socket.IO:', error);\n      toast.error(error.message || 'Lỗi không xác định từ server');\n    });\n\n    // Đóng kết nối khi component unmount\n    return () => {\n      console.log('Đóng kết nối Socket.IO');\n      if (newSocket) {\n        newSocket.off();\n        newSocket.disconnect();\n      }\n    };\n  }, [socketStatus === 'reconnecting']); // Thử kết nối lại khi trạng thái là reconnecting\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái Socket:', socketStatus);\n  }, [socketStatus]);\n\n  // Đánh dấu thông báo đã đọc\n  const handleMarkAsRead = async (notificationId) => {\n    try {\n      // Gọi API để đánh dấu đã đọc\n      await markNotificationAsRead(notificationId);\n      \n      // Cập nhật trạng thái trong context\n      setNotifications(notifications.map(n => \n        n._id === notificationId ? { ...n, status: 'read' } : n\n      ));\n      \n      // Gửi lệnh đánh dấu đã đọc qua Socket.IO nếu kết nối đang mở\n      if (socket && socket.connected) {\n        socket.emit('mark_read', {\n          notification_id: notificationId\n        });\n      }\n    } catch (error) {\n      console.error('Lỗi khi đánh dấu thông báo đã đọc:', error);\n    }\n  };\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: handleMarkAsRead\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      <ToastContainer />\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}