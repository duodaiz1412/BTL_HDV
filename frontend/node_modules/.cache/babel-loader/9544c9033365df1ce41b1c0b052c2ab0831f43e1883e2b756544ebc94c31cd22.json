{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nconst NOTIFICATION_SOCKET_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Auth APIs\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const register = async userData => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Movie APIs\nexport const getMovies = () => api.get('/movies');\nexport const getMovieById = id => api.get(`/movies/${id}`);\nexport const getShowtimes = movieId => api.get(`/movies/${movieId}/showtimes`);\n\n// Booking APIs\nexport const createBooking = async bookingData => {\n  try {\n    // Endpoint: POST /bookings\n    // Request body: \n    // {\n    //   \"customer_id\": \"string\",\n    //   \"movie_id\": \"string\",\n    //   \"showtime_id\": \"string\",\n    //   \"showtime\": \"string\",\n    //   \"seats\": [{ \"seat_id\": \"string\", \"seat_number\": \"string\" }],\n    //   \"total_amount\": 0,\n    //   \"status\": \"pending\"\n    // }\n    const response = await api.post('/bookings', bookingData);\n    return response;\n  } catch (error) {\n    console.error('Error creating booking:', error);\n    throw error;\n  }\n};\nexport const getBookings = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/bookings/customer/${customerId}`);\n};\nexport const getBookingById = id => api.get(`/bookings/${id}`);\n\n// Payment APIs\nexport const createPayment = paymentData => api.post('/payments', paymentData);\nexport const getPayments = () => api.get('/payments');\nexport const getPaymentById = id => api.get(`/payments/${id}`);\n\n// Seat APIs\nexport const getSeats = showtimeId => api.get(`/seats/showtime/${showtimeId}`);\nexport const checkSeats = (showtimeId, seatIds) => api.post(`/seats/check`, seatIds, {\n  params: {\n    showtime_id: showtimeId\n  }\n});\nexport const bookSeats = (customer_id, movie_id, showtime_id, showtime, seats, total_amount, status) => {\n  // Chuyển đổi mảng seat_id thành mảng đối tượng {seat_id, seat_number}\n  const formattedSeats = Array.isArray(seats) ? seats.map(seatId => {\n    // Nếu seats đã là mảng đối tượng thì không cần chuyển đổi\n    if (typeof seatId === 'object' && seatId.seat_id && seatId.seat_number) {\n      return seatId;\n    }\n    // Nếu không tìm thấy thông tin về seat_number, trả về một giá trị mặc định\n    return {\n      seat_id: seatId,\n      seat_number: seatId\n    };\n  }) : [];\n  return api.post('/bookings', {\n    customer_id,\n    movie_id,\n    showtime_id,\n    showtime,\n    seats: formattedSeats,\n    total_amount,\n    status\n  });\n};\n\n// Customer APIs\nexport const getProfile = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/customers/${customerId}`);\n};\nexport const updateProfile = data => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.put(`/customers/${customerId}`, data);\n};\n\n// Notification APIs\nexport const getNotifications = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/notifications/customer/${customerId}`);\n};\nexport const markNotificationAsRead = notificationId => {\n  return api.put(`/notifications/${notificationId}/status`, null, {\n    params: {\n      status: 'read'\n    }\n  });\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","NOTIFICATION_SOCKET_URL","api","create","baseURL","headers","login","credentials","response","post","error","register","userData","getMovies","get","getMovieById","id","getShowtimes","movieId","createBooking","bookingData","console","getBookings","customerId","localStorage","getItem","Error","getBookingById","createPayment","paymentData","getPayments","getPaymentById","getSeats","showtimeId","checkSeats","seatIds","params","showtime_id","bookSeats","customer_id","movie_id","showtime","seats","total_amount","status","formattedSeats","Array","isArray","map","seatId","seat_id","seat_number","getProfile","updateProfile","data","put","getNotifications","markNotificationAsRead","notificationId"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000';\nconst NOTIFICATION_SOCKET_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Auth APIs\nexport const login = async (credentials) => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const register = async (userData) => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Movie APIs\nexport const getMovies = () => api.get('/movies');\nexport const getMovieById = (id) => api.get(`/movies/${id}`);\nexport const getShowtimes = (movieId) => api.get(`/movies/${movieId}/showtimes`);\n\n// Booking APIs\nexport const createBooking = async (bookingData) => {\n  try {\n    // Endpoint: POST /bookings\n    // Request body: \n    // {\n    //   \"customer_id\": \"string\",\n    //   \"movie_id\": \"string\",\n    //   \"showtime_id\": \"string\",\n    //   \"showtime\": \"string\",\n    //   \"seats\": [{ \"seat_id\": \"string\", \"seat_number\": \"string\" }],\n    //   \"total_amount\": 0,\n    //   \"status\": \"pending\"\n    // }\n    const response = await api.post('/bookings', bookingData);\n    return response;\n  } catch (error) {\n    console.error('Error creating booking:', error);\n    throw error;\n  }\n};\n\nexport const getBookings = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/bookings/customer/${customerId}`);\n};\n\nexport const getBookingById = (id) => api.get(`/bookings/${id}`);\n\n// Payment APIs\nexport const createPayment = (paymentData) => api.post('/payments', paymentData);\nexport const getPayments = () => api.get('/payments');\nexport const getPaymentById = (id) => api.get(`/payments/${id}`);\n\n// Seat APIs\nexport const getSeats = (showtimeId) => api.get(`/seats/showtime/${showtimeId}`);\nexport const checkSeats = (showtimeId, seatIds) => api.post(`/seats/check`, seatIds, {\n  params: { showtime_id: showtimeId }\n});\nexport const bookSeats = (customer_id, movie_id, showtime_id, showtime, seats, total_amount, status) => {\n  // Chuyển đổi mảng seat_id thành mảng đối tượng {seat_id, seat_number}\n  const formattedSeats = Array.isArray(seats) ? seats.map(seatId => {\n    // Nếu seats đã là mảng đối tượng thì không cần chuyển đổi\n    if (typeof seatId === 'object' && seatId.seat_id && seatId.seat_number) {\n      return seatId;\n    }\n    // Nếu không tìm thấy thông tin về seat_number, trả về một giá trị mặc định\n    return { seat_id: seatId, seat_number: seatId };\n  }) : [];\n\n  return api.post('/bookings', { \n    customer_id, \n    movie_id, \n    showtime_id, \n    showtime, \n    seats: formattedSeats, \n    total_amount, \n    status \n  });\n};\n\n// Customer APIs\nexport const getProfile = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/customers/${customerId}`);\n};\n\nexport const updateProfile = (data) => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.put(`/customers/${customerId}`, data);\n};\n\n// Notification APIs\nexport const getNotifications = () => {\n  const customerId = localStorage.getItem('customer_id');\n  if (!customerId) {\n    throw new Error('Customer ID not found');\n  }\n  return api.get(`/notifications/customer/${customerId}`);\n};\n\nexport const markNotificationAsRead = (notificationId) => {\n  return api.put(`/notifications/${notificationId}/status`, null, {\n    params: { status: 'read' }\n  });\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}