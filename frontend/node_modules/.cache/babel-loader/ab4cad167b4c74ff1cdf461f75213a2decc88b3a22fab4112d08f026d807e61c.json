{"ast":null,"code":"import { io } from 'socket.io-client';\nconst SOCKET_URL = 'http://localhost:8000';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.customerId = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n  }\n  connect(customerId) {\n    if (this.socket && this.socket.connected) {\n      console.log('Socket already connected');\n      return this.socket;\n    }\n    this.customerId = customerId;\n\n    // Khởi tạo kết nối socket với query parameter customer_id\n    this.socket = io(SOCKET_URL, {\n      query: {\n        customer_id: customerId\n      },\n      transports: ['websocket', 'polling'],\n      // Thêm polling làm fallback\n      path: '/socket.io',\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000,\n      autoConnect: true\n    });\n\n    // Xử lý sự kiện kết nối\n    this.socket.on('connect', () => {\n      console.log('Socket connected with ID:', this.socket.id);\n      this.reconnectAttempts = 0;\n\n      // Gửi lại customer_id sau khi kết nối lại\n      this.socket.emit('join_room', {\n        room: `customer_${this.customerId}`\n      });\n    });\n\n    // Xử lý sự kiện ngắt kết nối\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n\n      // Thử kết nối lại nếu chưa vượt quá số lần thử\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        setTimeout(() => {\n          if (!this.socket.connected) {\n            this.socket.connect();\n          }\n        }, 1000);\n      }\n    });\n\n    // Xử lý sự kiện lỗi\n    this.socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n\n    // Xử lý sự kiện connect_error\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n    });\n\n    // Xử lý sự kiện welcome\n    this.socket.on('welcome', data => {\n      console.log('Welcome message:', data);\n    });\n\n    // Xử lý sự kiện room_joined\n    this.socket.on('room_joined', data => {\n      console.log('Joined room:', data);\n    });\n\n    // Xử lý sự kiện reconnect\n    this.socket.on('reconnect', attemptNumber => {\n      console.log('Socket reconnected after', attemptNumber, 'attempts');\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.customerId = null;\n      this.reconnectAttempts = 0;\n    }\n  }\n\n  // Đăng ký callback cho sự kiện new_notification\n  onNewNotification(callback) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    // Xóa listener cũ nếu có\n    this.socket.off('new_notification');\n    // Thêm listener mới\n    this.socket.on('new_notification', data => {\n      console.log('Received notification:', data);\n      callback(data);\n    });\n  }\n\n  // Hủy đăng ký callback cho sự kiện new_notification\n  offNewNotification(callback) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.off('new_notification', callback);\n  }\n\n  // Kiểm tra trạng thái kết nối\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n\n  // Kết nối lại thủ công\n  reconnect() {\n    if (this.socket && !this.socket.connected && this.customerId) {\n      this.socket.connect();\n    }\n  }\n}\n\n// Export singleton instance\nexport default new SocketService();","map":{"version":3,"names":["io","SOCKET_URL","SocketService","constructor","socket","customerId","reconnectAttempts","maxReconnectAttempts","connect","connected","console","log","query","customer_id","transports","path","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","autoConnect","on","id","emit","room","reason","setTimeout","error","data","attemptNumber","disconnect","onNewNotification","callback","off","offNewNotification","isConnected","reconnect"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nconst SOCKET_URL = 'http://localhost:8000';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.customerId = null;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n  }\r\n\r\n  connect(customerId) {\r\n    if (this.socket && this.socket.connected) {\r\n      console.log('Socket already connected');\r\n      return this.socket;\r\n    }\r\n\r\n    this.customerId = customerId;\r\n    \r\n    // Khởi tạo kết nối socket với query parameter customer_id\r\n    this.socket = io(SOCKET_URL, {\r\n      query: { customer_id: customerId },\r\n      transports: ['websocket', 'polling'], // Thêm polling làm fallback\r\n      path: '/socket.io',\r\n      reconnection: true,\r\n      reconnectionAttempts: this.maxReconnectAttempts,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      timeout: 20000,\r\n      autoConnect: true\r\n    });\r\n\r\n    // Xử lý sự kiện kết nối\r\n    this.socket.on('connect', () => {\r\n      console.log('Socket connected with ID:', this.socket.id);\r\n      this.reconnectAttempts = 0;\r\n      \r\n      // Gửi lại customer_id sau khi kết nối lại\r\n      this.socket.emit('join_room', { room: `customer_${this.customerId}` });\r\n    });\r\n\r\n    // Xử lý sự kiện ngắt kết nối\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log('Socket disconnected:', reason);\r\n      \r\n      // Thử kết nối lại nếu chưa vượt quá số lần thử\r\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n        this.reconnectAttempts++;\r\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n        setTimeout(() => {\r\n          if (!this.socket.connected) {\r\n            this.socket.connect();\r\n          }\r\n        }, 1000);\r\n      }\r\n    });\r\n\r\n    // Xử lý sự kiện lỗi\r\n    this.socket.on('error', (error) => {\r\n      console.error('Socket error:', error);\r\n    });\r\n\r\n    // Xử lý sự kiện connect_error\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    // Xử lý sự kiện welcome\r\n    this.socket.on('welcome', (data) => {\r\n      console.log('Welcome message:', data);\r\n    });\r\n\r\n    // Xử lý sự kiện room_joined\r\n    this.socket.on('room_joined', (data) => {\r\n      console.log('Joined room:', data);\r\n    });\r\n\r\n    // Xử lý sự kiện reconnect\r\n    this.socket.on('reconnect', (attemptNumber) => {\r\n      console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.customerId = null;\r\n      this.reconnectAttempts = 0;\r\n    }\r\n  }\r\n\r\n  // Đăng ký callback cho sự kiện new_notification\r\n  onNewNotification(callback) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    // Xóa listener cũ nếu có\r\n    this.socket.off('new_notification');\r\n    // Thêm listener mới\r\n    this.socket.on('new_notification', (data) => {\r\n      console.log('Received notification:', data);\r\n      callback(data);\r\n    });\r\n  }\r\n\r\n  // Hủy đăng ký callback cho sự kiện new_notification\r\n  offNewNotification(callback) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.off('new_notification', callback);\r\n  }\r\n\r\n  // Kiểm tra trạng thái kết nối\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  // Kết nối lại thủ công\r\n  reconnect() {\r\n    if (this.socket && !this.socket.connected && this.customerId) {\r\n      this.socket.connect();\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}