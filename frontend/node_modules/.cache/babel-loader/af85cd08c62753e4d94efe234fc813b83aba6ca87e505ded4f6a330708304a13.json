{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport socketService from '../services/socket';\nimport { getNotifications } from '../services/api';\n\n// Tạo context cho notifications\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NotificationContext = /*#__PURE__*/createContext({\n  notifications: [],\n  unreadCount: 0,\n  markAsRead: () => {}\n});\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Cập nhật số lượng thông báo chưa đọc\n  const updateUnreadCount = notifs => {\n    const count = notifs.filter(n => n.status === 'unread').length;\n    setUnreadCount(count);\n  };\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (!customerId) return;\n\n    // Kết nối socket\n    try {\n      socketService.connect(customerId);\n\n      // Xử lý thông báo mới\n      const handleNewNotification = notification => {\n        setNotifications(prev => {\n          const newNotifications = [notification, ...prev];\n          updateUnreadCount(newNotifications);\n          return newNotifications;\n        });\n        // Hiển thị toast thông báo\n        toast.info(notification.content, {\n          onClick: () => {\n            // Có thể thêm xử lý khi click vào toast\n          }\n        });\n      };\n\n      // Đăng ký lắng nghe sự kiện thông báo mới\n      socketService.onNewNotification(handleNewNotification);\n\n      // Lấy danh sách thông báo ban đầu\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          const notifs = response.data;\n          setNotifications(notifs);\n          updateUnreadCount(notifs);\n        } catch (error) {\n          console.error('Error fetching notifications:', error);\n          toast.error('Không thể tải thông báo');\n        }\n      };\n      fetchNotifications();\n\n      // Cleanup khi component unmount\n      return () => {\n        socketService.offNewNotification(handleNewNotification);\n        socketService.disconnect();\n      };\n    } catch (error) {\n      console.error('Socket connection error:', error);\n      toast.error('Không thể kết nối đến server thông báo');\n    }\n  }, []);\n\n  // Cung cấp context cho toàn bộ ứng dụng\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      setNotifications,\n      updateUnreadCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"ZKbdJ33iEtJJ28qAyIajw14iMHg=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","toast","socketService","getNotifications","jsxDEV","_jsxDEV","NotificationContext","notifications","unreadCount","markAsRead","useNotifications","_s","NotificationProvider","children","_s2","setNotifications","setUnreadCount","updateUnreadCount","notifs","count","filter","n","status","length","customerId","localStorage","getItem","connect","handleNewNotification","notification","prev","newNotifications","info","content","onClick","onNewNotification","fetchNotifications","response","data","error","console","offNewNotification","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport socketService from '../services/socket';\r\nimport { getNotifications } from '../services/api';\r\n\r\n// Tạo context cho notifications\r\nexport const NotificationContext = createContext({\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  markAsRead: () => {},\r\n});\r\n\r\nexport const useNotifications = () => useContext(NotificationContext);\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  // Cập nhật số lượng thông báo chưa đọc\r\n  const updateUnreadCount = (notifs) => {\r\n    const count = notifs.filter(n => n.status === 'unread').length;\r\n    setUnreadCount(count);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const customerId = localStorage.getItem('customer_id');\r\n    if (!customerId) return;\r\n\r\n    // Kết nối socket\r\n    try {\r\n      socketService.connect(customerId);\r\n\r\n      // Xử lý thông báo mới\r\n      const handleNewNotification = (notification) => {\r\n        setNotifications(prev => {\r\n          const newNotifications = [notification, ...prev];\r\n          updateUnreadCount(newNotifications);\r\n          return newNotifications;\r\n        });\r\n        // Hiển thị toast thông báo\r\n        toast.info(notification.content, {\r\n          onClick: () => {\r\n            // Có thể thêm xử lý khi click vào toast\r\n          }\r\n        });\r\n      };\r\n\r\n      // Đăng ký lắng nghe sự kiện thông báo mới\r\n      socketService.onNewNotification(handleNewNotification);\r\n\r\n      // Lấy danh sách thông báo ban đầu\r\n      const fetchNotifications = async () => {\r\n        try {\r\n          const response = await getNotifications();\r\n          const notifs = response.data;\r\n          setNotifications(notifs);\r\n          updateUnreadCount(notifs);\r\n        } catch (error) {\r\n          console.error('Error fetching notifications:', error);\r\n          toast.error('Không thể tải thông báo');\r\n        }\r\n      };\r\n\r\n      fetchNotifications();\r\n\r\n      // Cleanup khi component unmount\r\n      return () => {\r\n        socketService.offNewNotification(handleNewNotification);\r\n        socketService.disconnect();\r\n      };\r\n    } catch (error) {\r\n      console.error('Socket connection error:', error);\r\n      toast.error('Không thể kết nối đến server thông báo');\r\n    }\r\n  }, []);\r\n\r\n  // Cung cấp context cho toàn bộ ứng dụng\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        setNotifications,\r\n        updateUnreadCount\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}