{"ast":null,"code":"var _jsxFileName = \"D:\\\\BTL_HDV\\\\mid-project-379283427\\\\frontend\\\\src\\\\components\\\\NotificationProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { io } from 'socket.io-client';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối websocket để nhận thông báo realtime\n  useEffect(() => {\n    console.log('Bắt đầu kết nối WebSocket...');\n\n    // Kết nối đến Socket.IO server với các tùy chọn cấu hình đúng\n    const socketOptions = {\n      transports: ['websocket', 'polling'],\n      // Thử kết nối WebSocket trước, rồi quay lại polling nếu cần\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      forceNew: true,\n      timeout: 10000\n    };\n    console.log('Cấu hình Socket.IO:', socketOptions);\n    const socketInstance = io('http://localhost:8007', socketOptions);\n    setSocket(socketInstance);\n\n    // Xử lý kết nối\n    socketInstance.on('connect', () => {\n      console.log('Kết nối đến notification service thành công!', socketInstance.id);\n      setSocketStatus('connected');\n\n      // Lấy customer_id từ localStorage nếu có\n      const customerId = localStorage.getItem('customer_id');\n      if (customerId) {\n        // Tham gia vào phòng của khách hàng\n        console.log('Tham gia vào phòng cho customer_id:', customerId);\n        socketInstance.emit('join_room', {\n          customer_id: customerId\n        });\n      }\n    });\n\n    // Xử lý nhận thông báo\n    socketInstance.on('notification', data => {\n      console.log('Nhận thông báo mới:', data);\n      const customerId = localStorage.getItem('customer_id');\n\n      // Chỉ hiển thị thông báo cho đúng khách hàng\n      if (customerId && data.customer_id === customerId) {\n        // Hiển thị toast thông báo\n        toast.success(data.content, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n\n        // Cập nhật danh sách thông báo\n        setNotifications(prev => [data, ...prev]);\n      }\n    });\n\n    // Xử lý lỗi\n    socketInstance.on('connect_error', err => {\n      console.error('Lỗi kết nối đến notification service:', err);\n      setSocketStatus('error: ' + err.message);\n    });\n    socketInstance.on('error', err => {\n      console.error('Lỗi Socket.IO:', err);\n      setSocketStatus('socket error');\n    });\n    socketInstance.on('reconnect_attempt', attempt => {\n      console.log(`Đang thử kết nối lại lần ${attempt}...`);\n      setSocketStatus(`reconnecting (${attempt})`);\n    });\n    socketInstance.on('reconnect_failed', () => {\n      console.error('Không thể kết nối lại sau nhiều lần thử');\n      setSocketStatus('reconnect failed');\n    });\n    socketInstance.on('disconnect', reason => {\n      console.log('Socket bị ngắt kết nối:', reason);\n      setSocketStatus('disconnected: ' + reason);\n    });\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      console.log('Ngắt kết nối WebSocket...');\n      socketInstance.disconnect();\n    };\n  }, []);\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái Socket:', socketStatus);\n  }, [socketStatus]);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: notificationId => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => n._id === notificationId ? {\n        ...n,\n        status: 'read'\n      } : n));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"4n/h08Rh30GQowf5KDzPaxyAk8g=\");\n_c = NotificationProvider;\nexport default NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","io","ToastContainer","toast","getNotifications","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","socket","setSocket","notifications","setNotifications","loading","setLoading","socketStatus","setSocketStatus","customerId","localStorage","getItem","fetchNotifications","response","console","log","data","error","socketOptions","transports","reconnectionAttempts","reconnectionDelay","autoConnect","forceNew","timeout","socketInstance","on","id","emit","customer_id","success","content","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","prev","err","message","attempt","reason","disconnect","contextValue","markAsRead","notificationId","map","n","_id","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BTL_HDV/mid-project-379283427/frontend/src/components/NotificationProvider.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { io } from 'socket.io-client';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getNotifications } from '../services/api';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [socketStatus, setSocketStatus] = useState('disconnected');\n\n  // Lấy thông báo ban đầu từ API\n  useEffect(() => {\n    const customerId = localStorage.getItem('customer_id');\n    if (customerId) {\n      const fetchNotifications = async () => {\n        try {\n          const response = await getNotifications();\n          console.log('Dữ liệu thông báo đã tải:', response.data);\n          setNotifications(response.data || []);\n        } catch (error) {\n          console.error('Lỗi khi lấy thông báo:', error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Kết nối websocket để nhận thông báo realtime\n  useEffect(() => {\n    console.log('Bắt đầu kết nối WebSocket...');\n    \n    // Kết nối đến Socket.IO server với các tùy chọn cấu hình đúng\n    const socketOptions = {\n      transports: ['websocket', 'polling'], // Thử kết nối WebSocket trước, rồi quay lại polling nếu cần\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      autoConnect: true,\n      forceNew: true,\n      timeout: 10000\n    };\n    \n    console.log('Cấu hình Socket.IO:', socketOptions);\n    const socketInstance = io('http://localhost:8007', socketOptions);\n    \n    setSocket(socketInstance);\n    \n    // Xử lý kết nối\n    socketInstance.on('connect', () => {\n      console.log('Kết nối đến notification service thành công!', socketInstance.id);\n      setSocketStatus('connected');\n      \n      // Lấy customer_id từ localStorage nếu có\n      const customerId = localStorage.getItem('customer_id');\n      if (customerId) {\n        // Tham gia vào phòng của khách hàng\n        console.log('Tham gia vào phòng cho customer_id:', customerId);\n        socketInstance.emit('join_room', { customer_id: customerId });\n      }\n    });\n\n    // Xử lý nhận thông báo\n    socketInstance.on('notification', (data) => {\n      console.log('Nhận thông báo mới:', data);\n      const customerId = localStorage.getItem('customer_id');\n      \n      // Chỉ hiển thị thông báo cho đúng khách hàng\n      if (customerId && data.customer_id === customerId) {\n        // Hiển thị toast thông báo\n        toast.success(data.content, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n        });\n        \n        // Cập nhật danh sách thông báo\n        setNotifications(prev => [data, ...prev]);\n      }\n    });\n\n    // Xử lý lỗi\n    socketInstance.on('connect_error', (err) => {\n      console.error('Lỗi kết nối đến notification service:', err);\n      setSocketStatus('error: ' + err.message);\n    });\n\n    socketInstance.on('error', (err) => {\n      console.error('Lỗi Socket.IO:', err);\n      setSocketStatus('socket error');\n    });\n\n    socketInstance.on('reconnect_attempt', (attempt) => {\n      console.log(`Đang thử kết nối lại lần ${attempt}...`);\n      setSocketStatus(`reconnecting (${attempt})`);\n    });\n\n    socketInstance.on('reconnect_failed', () => {\n      console.error('Không thể kết nối lại sau nhiều lần thử');\n      setSocketStatus('reconnect failed');\n    });\n    \n    socketInstance.on('disconnect', (reason) => {\n      console.log('Socket bị ngắt kết nối:', reason);\n      setSocketStatus('disconnected: ' + reason);\n    });\n\n    // Dọn dẹp khi component unmount\n    return () => {\n      console.log('Ngắt kết nối WebSocket...');\n      socketInstance.disconnect();\n    };\n  }, []);\n\n  // Debug: Hiển thị thông báo trong console mỗi khi socketStatus thay đổi\n  useEffect(() => {\n    console.log('Trạng thái Socket:', socketStatus);\n  }, [socketStatus]);\n\n  // Đảm bảo context luôn có giá trị mới nhất\n  const contextValue = {\n    notifications,\n    loading,\n    socketStatus,\n    markAsRead: (notificationId) => {\n      // Cập nhật trạng thái đã đọc cho thông báo\n      setNotifications(notifications.map(n => \n        n._id === notificationId ? { ...n, status: 'read' } : n\n      ));\n    }\n  };\n\n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n      <ToastContainer />\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}